{"version":3,"sources":["webpack://WebIDL2/webpack/universalModuleDefinition","webpack://WebIDL2/webpack/bootstrap","webpack://WebIDL2/./lib/error.js","webpack://WebIDL2/./lib/tokeniser.js","webpack://WebIDL2/./lib/productions/base.js","webpack://WebIDL2/./lib/productions/type.js","webpack://WebIDL2/./lib/productions/default.js","webpack://WebIDL2/./lib/productions/array-base.js","webpack://WebIDL2/./lib/productions/extended-attributes.js","webpack://WebIDL2/./lib/productions/helpers.js","webpack://WebIDL2/./lib/productions/argument.js","webpack://WebIDL2/./lib/validators/helpers.js","webpack://WebIDL2/./lib/productions/token.js","webpack://WebIDL2/./lib/productions/operation.js","webpack://WebIDL2/./lib/productions/attribute.js","webpack://WebIDL2/./lib/productions/enum.js","webpack://WebIDL2/./lib/productions/includes.js","webpack://WebIDL2/./lib/productions/typedef.js","webpack://WebIDL2/./lib/productions/callback.js","webpack://WebIDL2/./lib/productions/container.js","webpack://WebIDL2/./lib/productions/constant.js","webpack://WebIDL2/./lib/productions/iterable.js","webpack://WebIDL2/./lib/productions/interface.js","webpack://WebIDL2/./lib/validators/interface.js","webpack://WebIDL2/./lib/productions/mixin.js","webpack://WebIDL2/./lib/productions/field.js","webpack://WebIDL2/./lib/productions/dictionary.js","webpack://WebIDL2/./lib/productions/namespace.js","webpack://WebIDL2/./lib/productions/callback-interface.js","webpack://WebIDL2/./lib/webidl2.js","webpack://WebIDL2/./lib/writer.js","webpack://WebIDL2/./lib/validator.js","webpack://WebIDL2/./index.js"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","error_error","source","position","current","message","kind","level","sliceTokens","count","slice","Math","max","tokensToText","inputs","precedes","text","map","trivia","join","nextToken","type","length","line","precedingLastLine","splitted","split","lastLine","subsequentTokens","subsequentText","sourceContext","repeat","contextType","context","partial","bareMessage","sourceName","input","tokens","validationError","token","options","index","tokenRe","decimal","integer","identifier","string","whitespace","comment","other","stringTypes","argumentNameKeywords","nonRegexTerminals","concat","punctuations","tokeniser_Tokeniser","[object Object]","idl","str","lastCharIndex","nextChar","charAt","result","test","attemptTokenMatch","noFlushTrivia","currentTrivia","pop","match","includes","punctuation","startsWith","push","Error","re","lastIndex","exec","tokenise","WebIDLParseError","syntaxError","candidates","probe","super","Base","defineProperties","json","undefined","inheritance","proto","descMap","getOwnPropertyDescriptors","entries","getPrototypeOf","type_suffix","tokeniser","obj","nullable","consume","error","single_type","typeName","ret","base","type_Type","open","subtype","return_type","type_with_extended_attributes","keyType","keyIdlType","separator","valueType","idlType","close","generic_type","primitive_type","generic","typ","or","union_type","extAttrs","Boolean","union","helpers_unescape","prefix","postfix","filter","default_Default","assign","def","const_value","expression","const_data","negative","ArrayBase","Array","extended_attributes_ExtendedAttributeParameters","secondaryName","list","rhsType","ids","parser","token_Token","listName","identifiers","argument_list","hasRhs","extended_attributes_SimpleExtendedAttribute","params","parse","rhs","arguments","defs","arg","validate","extended_attributes_ExtendedAttributes","extAttr","argument_Argument","start_position","optional","variadic","default","unconsume","idlTypeIncludesDictionary","unique","cache","typedefIncludesDictionary","set","operation_Operation","special","regular","termination","argument","attribute_Attribute","noInherit","readonly","allowDangler","first","items","item","num_type","integer_type","decimal_type","voidToken","stringifier","enum_EnumValue","enum_Enum","values","includes_Includes","target","mixin","typedef_Typedef","callback_CallbackFunction","container_Container","instance","inheritable","allowedMembers","colon","members","ea","mem","args","member","constant_Constant","unescape","iterable_IterableLike","secondTypeRequired","secondTypeAllowed","static_member","interface_Interface","every","opNames","Set","getOperations","op","partials","mixins","mixinMap","ext","additions","forEachExtension","addition","add","existings","has","checkInterfaceMemberDuplication","mixin_Mixin","field_Field","required","dictionary_Dictionary","namespace_Namespace","callback_interface_CallbackInterface","callback","parseByTokens","interface_","opts","definition","res","eof","concrete","definitions","noop","templates","wrap","reference","extendedAttribute","extendedAttributeReference","write","ast","ts","raw","unescaped","wrapper","reference_token","name_token","type_body","it","firstToken","ref","extended_attributes","default_","data","make_ext_at","id","eats","container","inh","iterate","iterable_like","parent","table","interface","interface mixin","namespace","operation","body","attribute","dictionary","field","const","typedef","enum","enum-value","v","iterable","legacyiterable","maplike","setlike","callback interface","things","results","thing","dispatch","getMixinMap","all","Map","include","array","validateIterable","duplicates","WeakMap","groupDefinitions","dup","checkDuplicatedNames","flat","__webpack_exports__"],"mappings":"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","file":"webidl2.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WebIDL2\"] = factory();\n\telse\n\t\troot[\"WebIDL2\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * @param {string} text\n */\nfunction lastLine(text) {\n  const splitted = text.split(\"\\n\");\n  return splitted[splitted.length - 1];\n}\n\n/**\n * @typedef {object} WebIDL2ErrorOptions\n * @property {\"error\" | \"warning\"} level\n *\n * @param {string} message error message\n * @param {\"Syntax\" | \"Validation\"} kind error type\n * @param {WebIDL2ErrorOptions} [options]\n */\nfunction error(source, position, current, message, kind, { level = \"error\" } = {}) {\n  /**\n   * @param {number} count\n   */\n  function sliceTokens(count) {\n    return count > 0 ?\n      source.slice(position, position + count) :\n      source.slice(Math.max(position + count, 0), position);\n  }\n\n  function tokensToText(inputs, { precedes } = {}) {\n    const text = inputs.map(t => t.trivia + t.value).join(\"\");\n    const nextToken = source[position];\n    if (nextToken.type === \"eof\") {\n      return text;\n    }\n    if (precedes) {\n      return text + nextToken.trivia;\n    }\n    return text.slice(nextToken.trivia.length);\n  }\n\n  const maxTokens = 5; // arbitrary but works well enough\n  const line =\n    source[position].type !== \"eof\" ? source[position].line :\n    source.length > 1 ? source[position - 1].line :\n    1;\n\n  const precedingLastLine = lastLine(\n    tokensToText(sliceTokens(-maxTokens), { precedes: true })\n  );\n\n  const subsequentTokens = sliceTokens(maxTokens);\n  const subsequentText = tokensToText(subsequentTokens);\n  const subsequentFirstLine = subsequentText.split(\"\\n\")[0];\n\n  const spaced = \" \".repeat(precedingLastLine.length) + \"^\";\n  const sourceContext = precedingLastLine + subsequentFirstLine + \"\\n\" + spaced;\n\n  const contextType = kind === \"Syntax\" ? \"since\" : \"inside\";\n  const inSourceName = source.name ? ` in ${source.name}` : \"\";\n  const grammaticalContext = current ? `, ${contextType} \\`${current.partial ? \"partial \" : \"\"}${current.type} ${current.name}\\`` : \"\";\n  const context = `${kind} error at line ${line}${inSourceName}${grammaticalContext}:\\n${sourceContext}`;\n  return {\n    message: `${context} ${message}`,\n    bareMessage: message,\n    context,\n    line,\n    sourceName: source.name,\n    level,\n    input: subsequentText,\n    tokens: subsequentTokens\n  };\n}\n\n/**\n * @param {string} message error message\n */\nexport function syntaxError(source, position, current, message) {\n  return error(source, position, current, message, \"Syntax\");\n}\n\n/**\n * @param {string} message error message\n * @param {WebIDL2ErrorOptions} [options]\n */\nexport function validationError(source, token, current, message, options) {\n  return error(source, token.index, current, message, \"Validation\", options);\n}\n","import { syntaxError } from \"./error.js\";\n\n// These regular expressions use the sticky flag so they will only match at\n// the current location (ie. the offset of lastIndex).\nconst tokenRe = {\n  // This expression uses a lookahead assertion to catch false matches\n  // against integers early.\n  \"decimal\": /-?(?=[0-9]*\\.|[0-9]+[eE])(([0-9]+\\.[0-9]*|[0-9]*\\.[0-9]+)([Ee][-+]?[0-9]+)?|[0-9]+[Ee][-+]?[0-9]+)/y,\n  \"integer\": /-?(0([Xx][0-9A-Fa-f]+|[0-7]*)|[1-9][0-9]*)/y,\n  \"identifier\": /[_-]?[A-Za-z][0-9A-Z_a-z-]*/y,\n  \"string\": /\"[^\"]*\"/y,\n  \"whitespace\": /[\\t\\n\\r ]+/y,\n  \"comment\": /((\\/(\\/.*|\\*([^*]|\\*[^/])*\\*\\/)[\\t\\n\\r ]*)+)/y,\n  \"other\": /[^\\t\\n\\r 0-9A-Za-z]/y\n};\n\nexport const stringTypes = [\n  \"ByteString\",\n  \"DOMString\",\n  \"USVString\"\n];\n\nexport const argumentNameKeywords = [\n  \"attribute\",\n  \"callback\",\n  \"const\",\n  \"deleter\",\n  \"dictionary\",\n  \"enum\",\n  \"getter\",\n  \"includes\",\n  \"inherit\",\n  \"interface\",\n  \"iterable\",\n  \"maplike\",\n  \"namespace\",\n  \"partial\",\n  \"required\",\n  \"setlike\",\n  \"setter\",\n  \"static\",\n  \"stringifier\",\n  \"typedef\",\n  \"unrestricted\"\n];\n\nconst nonRegexTerminals = [\n  \"-Infinity\",\n  \"FrozenArray\",\n  \"Infinity\",\n  \"NaN\",\n  \"Promise\",\n  \"boolean\",\n  \"byte\",\n  \"double\",\n  \"false\",\n  \"float\",\n  \"long\",\n  \"mixin\",\n  \"null\",\n  \"octet\",\n  \"optional\",\n  \"or\",\n  \"readonly\",\n  \"record\",\n  \"sequence\",\n  \"short\",\n  \"true\",\n  \"unsigned\",\n  \"void\"\n].concat(argumentNameKeywords, stringTypes);\n\nconst punctuations = [\n  \"(\",\n  \")\",\n  \",\",\n  \"...\",\n  \":\",\n  \";\",\n  \"<\",\n  \"=\",\n  \">\",\n  \"?\",\n  \"[\",\n  \"]\",\n  \"{\",\n  \"}\"\n];\n\n/**\n * @param {string} str\n */\nfunction tokenise(str) {\n  const tokens = [];\n  let lastCharIndex = 0;\n  let trivia = \"\";\n  let line = 1;\n  let index = 0;\n  while (lastCharIndex < str.length) {\n    const nextChar = str.charAt(lastCharIndex);\n    let result = -1;\n\n    if (/[\\t\\n\\r ]/.test(nextChar)) {\n      result = attemptTokenMatch(\"whitespace\", { noFlushTrivia: true });\n    } else if (nextChar === '/') {\n      result = attemptTokenMatch(\"comment\", { noFlushTrivia: true });\n    }\n\n    if (result !== -1) {\n      const currentTrivia = tokens.pop().value;\n      line += (currentTrivia.match(/\\n/g) || []).length;\n      trivia += currentTrivia;\n      index -= 1;\n    } else if (/[-0-9.A-Z_a-z]/.test(nextChar)) {\n      result = attemptTokenMatch(\"decimal\");\n      if (result === -1) {\n        result = attemptTokenMatch(\"integer\");\n      }\n      if (result === -1) {\n        result = attemptTokenMatch(\"identifier\");\n        const token = tokens[tokens.length - 1];\n        if (result !== -1 && nonRegexTerminals.includes(token.value)) {\n          token.type = token.value;\n        }\n      }\n    } else if (nextChar === '\"') {\n      result = attemptTokenMatch(\"string\");\n    }\n\n    for (const punctuation of punctuations) {\n      if (str.startsWith(punctuation, lastCharIndex)) {\n        tokens.push({ type: punctuation, value: punctuation, trivia, line, index });\n        trivia = \"\";\n        lastCharIndex += punctuation.length;\n        result = lastCharIndex;\n        break;\n      }\n    }\n\n    // other as the last try\n    if (result === -1) {\n      result = attemptTokenMatch(\"other\");\n    }\n    if (result === -1) {\n      throw new Error(\"Token stream not progressing\");\n    }\n    lastCharIndex = result;\n    index += 1;\n  }\n\n  // remaining trivia as eof\n  tokens.push({\n    type: \"eof\",\n    value: \"\",\n    trivia\n  });\n\n  return tokens;\n\n  /**\n   * @param {keyof tokenRe} type\n   * @param {object} [options]\n   * @param {boolean} [options.noFlushTrivia]\n   */\n  function attemptTokenMatch(type, { noFlushTrivia } = {}) {\n    const re = tokenRe[type];\n    re.lastIndex = lastCharIndex;\n    const result = re.exec(str);\n    if (result) {\n      tokens.push({ type, value: result[0], trivia, line, index });\n      if (!noFlushTrivia) {\n        trivia = \"\";\n      }\n      return re.lastIndex;\n    }\n    return -1;\n  }\n}\n\nexport class Tokeniser {\n  /**\n   * @param {string} idl\n   */\n  constructor(idl) {\n    this.source = tokenise(idl);\n    this.position = 0;\n  }\n\n  /**\n   * @param {string} message\n   */\n  error(message) {\n    throw new WebIDLParseError(syntaxError(this.source, this.position, this.current, message));\n  }\n\n  /**\n   * @param {string} type\n   */\n  probe(type) {\n    return this.source.length > this.position && this.source[this.position].type === type;\n  }\n\n  /**\n   * @param  {...string} candidates\n   */\n  consume(...candidates) {\n    for (const type of candidates) {\n      if (!this.probe(type)) continue;\n      const token = this.source[this.position];\n      this.position++;\n      return token;\n    }\n  }\n\n  /**\n   * @param {number} position\n   */\n  unconsume(position) {\n    this.position = position;\n  }\n}\n\nclass WebIDLParseError extends Error {\n  constructor({ message, bareMessage, context, line, sourceName, input, tokens }) {\n    super(message);\n\n    this.name = \"WebIDLParseError\"; // not to be mangled\n    this.bareMessage = bareMessage;\n    this.context = context;\n    this.line = line;\n    this.sourceName = sourceName;\n    this.input = input;\n    this.tokens = tokens;\n  }\n}\n","export class Base {\n  constructor({ source, tokens }) {\n    Object.defineProperties(this, {\n      source: { value: source },\n      tokens: { value: tokens }\n    });\n  }\n\n  toJSON() {\n    const json = { type: undefined, name: undefined, inheritance: undefined };\n    let proto = this;\n    while (proto !== Object.prototype) {\n      const descMap = Object.getOwnPropertyDescriptors(proto);\n      for (const [key, value] of Object.entries(descMap)) {\n        if (value.enumerable || value.get) {\n          json[key] = this[key];\n        }\n      }\n      proto = Object.getPrototypeOf(proto);\n    }\n    return json;\n  }\n}\n","import { Base } from \"./base.js\";\nimport { unescape, type_with_extended_attributes, return_type, primitive_type } from \"./helpers.js\";\nimport { stringTypes } from \"../tokeniser.js\";\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n * @param {string} typeName\n */\nfunction generic_type(tokeniser, typeName) {\n  const base = tokeniser.consume(\"FrozenArray\", \"Promise\", \"sequence\", \"record\");\n  if (!base) {\n    return;\n  }\n  const ret = new Type({ source: tokeniser.source, tokens: { base } });\n  ret.tokens.open = tokeniser.consume(\"<\") || tokeniser.error(`No opening bracket after ${base.type}`);\n  switch (base.type) {\n    case \"Promise\": {\n      if (tokeniser.probe(\"[\")) tokeniser.error(\"Promise type cannot have extended attribute\");\n      const subtype = return_type(tokeniser, typeName) || tokeniser.error(\"Missing Promise subtype\");\n      ret.subtype.push(subtype);\n      break;\n    }\n    case \"sequence\":\n    case \"FrozenArray\": {\n      const subtype = type_with_extended_attributes(tokeniser, typeName) || tokeniser.error(`Missing ${base.type} subtype`);\n      ret.subtype.push(subtype);\n      break;\n    }\n    case \"record\": {\n      if (tokeniser.probe(\"[\")) tokeniser.error(\"Record key cannot have extended attribute\");\n      const keyType = tokeniser.consume(...stringTypes) || tokeniser.error(`Record key must be one of: ${stringTypes.join(\", \")}`);\n      const keyIdlType = new Type({ source: tokeniser.source, tokens: { base: keyType }});\n      keyIdlType.tokens.separator = tokeniser.consume(\",\") || tokeniser.error(\"Missing comma after record key type\");\n      keyIdlType.type = typeName;\n      const valueType = type_with_extended_attributes(tokeniser, typeName) || tokeniser.error(\"Error parsing generic type record\");\n      ret.subtype.push(keyIdlType, valueType);\n      break;\n    }\n  }\n  if (!ret.idlType) tokeniser.error(`Error parsing generic type ${base.type}`);\n  ret.tokens.close = tokeniser.consume(\">\") || tokeniser.error(`Missing closing bracket after ${base.type}`);\n  return ret;\n}\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n */\nfunction type_suffix(tokeniser, obj) {\n  const nullable = tokeniser.consume(\"?\");\n  if (nullable) {\n    obj.tokens.nullable = nullable;\n  }\n  if (tokeniser.probe(\"?\")) tokeniser.error(\"Can't nullable more than once\");\n}\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n * @param {string} typeName\n */\nfunction single_type(tokeniser, typeName) {\n  let ret = generic_type(tokeniser, typeName) || primitive_type(tokeniser);\n  if (!ret) {\n    const base = tokeniser.consume(\"identifier\", ...stringTypes);\n    if (!base) {\n      return;\n    }\n    ret = new Type({ source: tokeniser.source, tokens: { base } });\n    if (tokeniser.probe(\"<\")) tokeniser.error(`Unsupported generic type ${base.value}`);\n  }\n  if (ret.generic === \"Promise\" && tokeniser.probe(\"?\")) {\n    tokeniser.error(\"Promise type cannot be nullable\");\n  }\n  ret.type = typeName || null;\n  type_suffix(tokeniser, ret);\n  if (ret.nullable && ret.idlType === \"any\") tokeniser.error(\"Type `any` cannot be made nullable\");\n  return ret;\n}\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n * @param {string} type\n */\nfunction union_type(tokeniser, type) {\n  const tokens = {};\n  tokens.open = tokeniser.consume(\"(\");\n  if (!tokens.open) return;\n  const ret = new Type({ source: tokeniser.source, tokens });\n  ret.type = type || null;\n  while (true) {\n    const typ = type_with_extended_attributes(tokeniser) || tokeniser.error(\"No type after open parenthesis or 'or' in union type\");\n    if (typ.idlType === \"any\") tokeniser.error(\"Type `any` cannot be included in a union type\");\n    ret.subtype.push(typ);\n    const or = tokeniser.consume(\"or\");\n    if (or) {\n      typ.tokens.separator = or;\n    }\n    else break;\n  }\n  if (ret.idlType.length < 2) {\n    tokeniser.error(\"At least two types are expected in a union type but found less\");\n  }\n  tokens.close = tokeniser.consume(\")\") || tokeniser.error(\"Unterminated union type\");\n  type_suffix(tokeniser, ret);\n  return ret;\n}\n\nexport class Type extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   * @param {string} typeName\n   */\n  static parse(tokeniser, typeName) {\n    return single_type(tokeniser, typeName) || union_type(tokeniser, typeName);\n  }\n\n  constructor({ source, tokens }) {\n    super({ source, tokens });\n    Object.defineProperty(this, \"subtype\", { value: [] });\n    this.extAttrs = [];\n  }\n\n  get generic() {\n    if (this.subtype.length && this.tokens.base) {\n      return this.tokens.base.value;\n    }\n    return \"\";\n  }\n  get nullable() {\n    return Boolean(this.tokens.nullable);\n  }\n  get union() {\n    return Boolean(this.subtype.length) && !this.tokens.base;\n  }\n  get idlType() {\n    if (this.subtype.length) {\n      return this.subtype;\n    }\n    // Adding prefixes/postfixes for \"unrestricted float\", etc.\n    const name = [\n      this.tokens.prefix,\n      this.tokens.base,\n      this.tokens.postfix\n    ].filter(t => t).map(t => t.value).join(\" \");\n    return unescape(name);\n  }\n}\n","import { Base } from \"./base.js\";\nimport { const_data, const_value } from \"./helpers.js\";\n\nexport class Default extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const assign = tokeniser.consume(\"=\");\n    if (!assign) {\n      return null;\n    }\n    const def = const_value(tokeniser) || tokeniser.consume(\"string\", \"null\", \"[\", \"{\") || tokeniser.error(\"No value for default\");\n    const expression = [def];\n    if (def.type === \"[\") {\n      const close = tokeniser.consume(\"]\") || tokeniser.error(\"Default sequence value must be empty\");\n      expression.push(close);\n    } else if (def.type === \"{\") {\n      const close = tokeniser.consume(\"}\") || tokeniser.error(\"Default dictionary value must be empty\");\n      expression.push(close);\n    }\n    return new Default({ source: tokeniser.source, tokens: { assign }, expression });\n  }\n\n  constructor({ source, tokens, expression }) {\n    super({ source, tokens });\n    Object.defineProperty(this, \"expression\", { value: expression });\n  }\n\n  get type() {\n    return const_data(this.expression[0]).type;\n  }\n  get value() {\n    return const_data(this.expression[0]).value;\n  }\n  get negative() {\n    return const_data(this.expression[0]).negative;\n  }\n}\n","export class ArrayBase extends Array {\n  constructor({ source, tokens }) {\n    super();\n    Object.defineProperties(this, {\n      source: { value: source },\n      tokens: { value: tokens }\n    });\n  }\n}\n","import { Base } from \"./base.js\";\nimport { ArrayBase } from \"./array-base.js\";\nimport { list, identifiers, argument_list } from \"./helpers.js\";\nimport { validationError } from \"../error.js\";\n\nclass ExtendedAttributeParameters extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const tokens = { assign: tokeniser.consume(\"=\") };\n    const ret = new ExtendedAttributeParameters({ source: tokeniser.source, tokens });\n    if (tokens.assign) {\n      tokens.secondaryName = tokeniser.consume(\"identifier\", \"decimal\", \"integer\", \"string\");\n    }\n    tokens.open = tokeniser.consume(\"(\");\n    if (tokens.open) {\n      ret.list = ret.rhsType === \"identifier-list\" ?\n        // [Exposed=(Window,Worker)]\n        identifiers(tokeniser) :\n        // [NamedConstructor=Audio(DOMString src)] or [Constructor(DOMString str)]\n        argument_list(tokeniser);\n      tokens.close = tokeniser.consume(\")\") || tokeniser.error(\"Unexpected token in extended attribute argument list\");\n    } else if (ret.hasRhs && !tokens.secondaryName) {\n      tokeniser.error(\"No right hand side to extended attribute assignment\");\n    }\n    return ret;\n  }\n\n  get rhsType() {\n    return !this.tokens.assign ? null :\n      !this.tokens.secondaryName ? \"identifier-list\" :\n        this.tokens.secondaryName.type;\n  }\n}\n\nclass SimpleExtendedAttribute extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const name = tokeniser.consume(\"identifier\");\n    if (name) {\n      return new SimpleExtendedAttribute({\n        source: tokeniser.source,\n        tokens: { name },\n        params: ExtendedAttributeParameters.parse(tokeniser)\n      });\n    }\n  }\n\n  constructor({ source, tokens, params }) {\n    super({ source, tokens });\n    Object.defineProperty(this, \"params\", { value: params });\n  }\n\n  get type() {\n    return \"extended-attribute\";\n  }\n  get name() {\n    return this.tokens.name.value;\n  }\n  get rhs() {\n    const { rhsType: type, tokens, list } = this.params;\n    if (!type) {\n      return null;\n    }\n    const value = type === \"identifier-list\" ? list : tokens.secondaryName.value;\n    return { type, value };\n  }\n  get arguments() {\n    const { rhsType, list } = this.params;\n    if (!list || rhsType === \"identifier-list\") {\n      return [];\n    }\n    return list;\n  }\n\n  *validate(defs) {\n    if (this.name === \"NoInterfaceObject\") {\n      const message = `\\`[NoInterfaceObject]\\` extended attribute is an \\\nundesirable feature that may be removed from Web IDL in the future. Refer to the \\\n[relevant upstream PR](https://github.com/heycam/webidl/pull/609) for more \\\ninformation.`;\n      yield validationError(this.source, this.tokens.name, this, message, { level: \"warning\" });\n    }\n    for (const arg of this.arguments) {\n      yield* arg.validate(defs);\n    }\n  }\n}\n\n// Note: we parse something simpler than the official syntax. It's all that ever\n// seems to be used\nexport class ExtendedAttributes extends ArrayBase {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const tokens = {};\n    tokens.open = tokeniser.consume(\"[\");\n    if (!tokens.open) return new ExtendedAttributes({});\n    const ret = new ExtendedAttributes({ source: tokeniser.source, tokens });\n    ret.push(...list(tokeniser, {\n      parser: SimpleExtendedAttribute.parse,\n      listName: \"extended attribute\"\n    }));\n    tokens.close = tokeniser.consume(\"]\") || tokeniser.error(\"Unexpected closing token of extended attribute\");\n    if (!ret.length) {\n      tokeniser.error(\"Found an empty extended attribute\");\n    }\n    if (tokeniser.probe(\"[\")) {\n      tokeniser.error(\"Illegal double extended attribute lists, consider merging them\");\n    }\n    return ret;\n  }\n\n  *validate(defs) {\n    for (const extAttr of this) {\n      yield* extAttr.validate(defs);\n    }\n  }\n}\n","import { Type } from \"./type.js\";\nimport { Argument } from \"./argument.js\";\nimport { Token } from \"./token.js\";\nimport { ExtendedAttributes } from \"./extended-attributes.js\";\nimport { Operation } from \"./operation.js\";\nimport { Attribute } from \"./attribute.js\";\n\n/**\n * @param {string} identifier\n */\nexport function unescape(identifier) {\n  return identifier.startsWith('_') ? identifier.slice(1) : identifier;\n}\n\n/**\n * Parses comma-separated list\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n * @param {object} args\n * @param {Function} args.parser parser function for each item\n * @param {boolean} [args.allowDangler] whether to allow dangling comma\n * @param {string} [args.listName] the name to be shown on error messages\n */\nexport function list(tokeniser, { parser, allowDangler, listName = \"list\" }) {\n  const first = parser(tokeniser);\n  if (!first) {\n    return [];\n  }\n  first.tokens.separator = tokeniser.consume(\",\");\n  const items = [first];\n  while (first.tokens.separator) {\n    const item = parser(tokeniser);\n    if (!item) {\n      if (!allowDangler) {\n        tokeniser.error(`Trailing comma in ${listName}`);\n      }\n      break;\n    }\n    item.tokens.separator = tokeniser.consume(\",\");\n    items.push(item);\n    if (!item.tokens.separator) break;\n  }\n  return items;\n}\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n */\nexport function const_value(tokeniser) {\n  return tokeniser.consume(\"true\", \"false\", \"Infinity\", \"-Infinity\", \"NaN\", \"decimal\", \"integer\");\n}\n\n/**\n * @param {object} token\n * @param {string} token.type\n * @param {string} token.value\n */\nexport function const_data({ type, value }) {\n  switch (type) {\n    case \"true\":\n    case \"false\":\n      return { type: \"boolean\", value: type === \"true\" };\n    case \"Infinity\":\n    case \"-Infinity\":\n      return { type: \"Infinity\", negative: type.startsWith(\"-\") };\n    case \"[\":\n      return { type: \"sequence\", value: [] };\n    case \"{\":\n      return { type: \"dictionary\" };\n    case \"decimal\":\n    case \"integer\":\n      return { type: \"number\", value };\n    case \"string\":\n      return { type: \"string\", value: value.slice(1, -1) };\n    default:\n      return { type };\n  }\n}\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n */\nexport function primitive_type(tokeniser) {\n  function integer_type() {\n    const prefix = tokeniser.consume(\"unsigned\");\n    const base = tokeniser.consume(\"short\", \"long\");\n    if (base) {\n      const postfix = tokeniser.consume(\"long\");\n      return new Type({ source, tokens: { prefix, base, postfix } });\n    }\n    if (prefix) tokeniser.error(\"Failed to parse integer type\");\n  }\n\n  function decimal_type() {\n    const prefix = tokeniser.consume(\"unrestricted\");\n    const base = tokeniser.consume(\"float\", \"double\");\n    if (base) {\n      return new Type({ source, tokens: { prefix, base } });\n    }\n    if (prefix) tokeniser.error(\"Failed to parse float type\");\n  }\n\n  const { source } = tokeniser;\n  const num_type = integer_type(tokeniser) || decimal_type(tokeniser);\n  if (num_type) return num_type;\n  const base = tokeniser.consume(\"boolean\", \"byte\", \"octet\");\n  if (base) {\n    return new Type({ source, tokens: { base } });\n  }\n}\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n */\nexport function identifiers(tokeniser) {\n  const ids = list(tokeniser, { parser: Token.parser(tokeniser, \"identifier\"), listName: \"identifier list\" });\n  if (!ids.length) {\n    tokeniser.error(\"Expected identifiers but none found\");\n  }\n  return ids;\n}\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n */\nexport function argument_list(tokeniser) {\n  return list(tokeniser, { parser: Argument.parse, listName: \"arguments list\" });\n}\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n * @param {string} typeName\n */\nexport function type_with_extended_attributes(tokeniser, typeName) {\n  const extAttrs = ExtendedAttributes.parse(tokeniser);\n  const ret = Type.parse(tokeniser, typeName);\n  if (ret) ret.extAttrs = extAttrs;\n  return ret;\n}\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n * @param {string} typeName\n */\nexport function return_type(tokeniser, typeName) {\n  const typ = Type.parse(tokeniser, typeName || \"return-type\");\n  if (typ) {\n    return typ;\n  }\n  const voidToken = tokeniser.consume(\"void\");\n  if (voidToken) {\n    const ret = new Type({ source: tokeniser.source, tokens: { base: voidToken } });\n    ret.type = \"return-type\";\n    return ret;\n  }\n}\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n */\nexport function stringifier(tokeniser) {\n  const special = tokeniser.consume(\"stringifier\");\n  if (!special) return;\n  const member = Attribute.parse(tokeniser, { special }) ||\n    Operation.parse(tokeniser, { special }) ||\n    tokeniser.error(\"Unterminated stringifier\");\n  return member;\n}\n","import { Base } from \"./base.js\";\nimport { Default } from \"./default.js\";\nimport { ExtendedAttributes } from \"./extended-attributes.js\";\nimport { unescape, type_with_extended_attributes } from \"./helpers.js\";\nimport { argumentNameKeywords } from \"../tokeniser.js\";\nimport { validationError } from \"../error.js\";\nimport { idlTypeIncludesDictionary } from \"../validators/helpers.js\";\n\nexport class Argument extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const start_position = tokeniser.position;\n    const tokens = {};\n    const ret = new Argument({ source: tokeniser.source, tokens });\n    ret.extAttrs = ExtendedAttributes.parse(tokeniser);\n    tokens.optional = tokeniser.consume(\"optional\");\n    ret.idlType = type_with_extended_attributes(tokeniser, \"argument-type\");\n    if (!ret.idlType) {\n      return tokeniser.unconsume(start_position);\n    }\n    if (!tokens.optional) {\n      tokens.variadic = tokeniser.consume(\"...\");\n    }\n    tokens.name = tokeniser.consume(\"identifier\", ...argumentNameKeywords);\n    if (!tokens.name) {\n      return tokeniser.unconsume(start_position);\n    }\n    ret.default = tokens.optional ? Default.parse(tokeniser) : null;\n    return ret;\n  }\n\n  get type() {\n    return \"argument\";\n  }\n  get optional() {\n    return !!this.tokens.optional;\n  }\n  get variadic() {\n    return !!this.tokens.variadic;\n  }\n  get name() {\n    return unescape(this.tokens.name.value);\n  }\n\n  *validate(defs) {\n    if (idlTypeIncludesDictionary(this.idlType, defs)) {\n      if (this.optional && !this.default) {\n        const message = `Optional dictionary arguments must have a default value of \\`{}\\`.`;\n        yield validationError(this.source, this.tokens.name, this, message);\n      }\n      if (this.idlType.nullable) {\n        const message = `Dictionary arguments cannot be nullable.`;\n        yield validationError(this.source, this.tokens.name, this, message);\n      }\n    }\n  }\n}\n","export function idlTypeIncludesDictionary(idlType, defs) {\n  if (!idlType.union) {\n    const def = defs.unique.get(idlType.idlType);\n    if (!def) {\n      return false;\n    }\n    if (def.type === \"typedef\") {\n      const cached = defs.cache.typedefIncludesDictionary.get(def);\n      if (cached === null) {\n        return false; // null means indeterminate, return false for now\n      }\n      defs.cache.typedefIncludesDictionary.set(def, null); // indeterminate state\n      const result = idlTypeIncludesDictionary(def.idlType, defs);\n      defs.cache.typedefIncludesDictionary.set(def, result);\n      return result;\n    }\n    return def.type === \"dictionary\";\n  }\n  for (const subtype of idlType.subtype) {\n    if (idlTypeIncludesDictionary(subtype, defs)) {\n      return true;\n    }\n  }\n  return false;\n}\n","import { Base } from \"./base.js\";\n\nexport class Token extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   * @param {string} type\n   */\n  static parser(tokeniser, type) {\n    return () => {\n      const value = tokeniser.consume(type);\n      if (value) {\n        return new Token({ source: tokeniser.source, tokens: { value } });\n      }\n    };\n  }\n\n  get value() {\n    return this.tokens.value.value;\n  }\n}\n","import { Base } from \"./base.js\";\nimport { return_type, argument_list, unescape } from \"./helpers.js\";\n\nexport class Operation extends Base {\n  /**\n   * @param {import(\"../tokeniser.js\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser, { special, regular } = {}) {\n    const tokens = { special };\n    const ret = new Operation({ source: tokeniser.source, tokens });\n    if (special && special.value === \"stringifier\") {\n      tokens.termination = tokeniser.consume(\";\");\n      if (tokens.termination) {\n        ret.arguments = [];\n        return ret;\n      }\n    }\n    if (!special && !regular) {\n      tokens.special = tokeniser.consume(\"getter\", \"setter\", \"deleter\");\n    }\n    ret.idlType = return_type(tokeniser) || tokeniser.error(\"Missing return type\");\n    tokens.name = tokeniser.consume(\"identifier\");\n    tokens.open = tokeniser.consume(\"(\") || tokeniser.error(\"Invalid operation\");\n    ret.arguments = argument_list(tokeniser);\n    tokens.close = tokeniser.consume(\")\") || tokeniser.error(\"Unterminated operation\");\n    tokens.termination = tokeniser.consume(\";\") || tokeniser.error(\"Unterminated operation, expected `;`\");\n    return ret;\n  }\n\n  get type() {\n    return \"operation\";\n  }\n  get name() {\n    const { name } = this.tokens;\n    if (!name) {\n      return \"\";\n    }\n    return unescape(name.value);\n  }\n  get special() {\n    if (!this.tokens.special) {\n      return \"\";\n    }\n    return this.tokens.special.value;\n  }\n\n  *validate(defs) {\n    for (const argument of this.arguments) {\n      yield* argument.validate(defs);\n    }\n  }\n}\n","import { Base } from \"./base.js\";\nimport { type_with_extended_attributes, unescape } from \"./helpers.js\";\n\nexport class Attribute extends Base {\n  /**\n   * @param {import(\"../tokeniser.js\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser, { special, noInherit = false, readonly = false } = {}) {\n    const start_position = tokeniser.position;\n    const tokens = { special };\n    const ret = new Attribute({ source: tokeniser.source, tokens });\n    if (!special && !noInherit) {\n      tokens.special = tokeniser.consume(\"inherit\");\n    }\n    if (ret.special === \"inherit\" && tokeniser.probe(\"readonly\")) {\n      tokeniser.error(\"Inherited attributes cannot be read-only\");\n    }\n    tokens.readonly = tokeniser.consume(\"readonly\");\n    if (readonly && !tokens.readonly && tokeniser.probe(\"attribute\")) {\n      tokeniser.error(\"Attributes must be readonly in this context\");\n    }\n    tokens.base = tokeniser.consume(\"attribute\");\n    if (!tokens.base) {\n      tokeniser.unconsume(start_position);\n      return;\n    }\n    ret.idlType = type_with_extended_attributes(tokeniser, \"attribute-type\") || tokeniser.error(\"Attribute lacks a type\");\n    switch (ret.idlType.generic) {\n      case \"sequence\":\n      case \"record\": tokeniser.error(`Attributes cannot accept ${ret.idlType.generic} types`);\n    }\n    tokens.name = tokeniser.consume(\"identifier\", \"required\") || tokeniser.error(\"Attribute lacks a name\");\n    tokens.termination = tokeniser.consume(\";\") || tokeniser.error(\"Unterminated attribute, expected `;`\");\n    return ret;\n  }\n\n  get type() {\n    return \"attribute\";\n  }\n  get special() {\n    if (!this.tokens.special) {\n      return \"\";\n    }\n    return this.tokens.special.value;\n  }\n  get readonly() {\n    return !!this.tokens.readonly;\n  }\n  get name() {\n    return unescape(this.tokens.name.value);\n  }\n}\n","import { list, unescape } from \"./helpers.js\";\nimport { Token } from \"./token.js\";\nimport { Base } from \"./base.js\";\n\nclass EnumValue extends Token {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const value = tokeniser.consume(\"string\");\n    if (value) {\n      return new EnumValue({ source: tokeniser.source, tokens: { value } });\n    }\n  }\n\n  get type() {\n    return \"enum-value\";\n  }\n  get value() {\n    return super.value.slice(1, -1);\n  }\n}\n\nexport class Enum extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const tokens = {};\n    tokens.base = tokeniser.consume(\"enum\");\n    if (!tokens.base) {\n      return;\n    }\n    tokens.name = tokeniser.consume(\"identifier\") || tokeniser.error(\"No name for enum\");\n    const ret = tokeniser.current = new Enum({ source: tokeniser.source, tokens });\n    tokens.open = tokeniser.consume(\"{\") || tokeniser.error(\"Bodyless enum\");\n    ret.values = list(tokeniser, {\n      parser: EnumValue.parse,\n      allowDangler: true,\n      listName: \"enumeration\"\n    });\n    if (tokeniser.probe(\"string\")) {\n      tokeniser.error(\"No comma between enum values\");\n    }\n    tokens.close = tokeniser.consume(\"}\") || tokeniser.error(\"Unexpected value in enum\");\n    if (!ret.values.length) {\n      tokeniser.error(\"No value in enum\");\n    }\n    tokens.termination = tokeniser.consume(\";\") || tokeniser.error(\"No semicolon after enum\");\n    return ret;\n  }\n\n  get type() {\n    return \"enum\";\n  }\n  get name() {\n    return unescape(this.tokens.name.value);\n  }\n}\n","import { Base } from \"./base.js\";\nimport { unescape } from \"./helpers.js\";\n\nexport class Includes extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const target = tokeniser.consume(\"identifier\");\n    if (!target) {\n      return;\n    }\n    const tokens = { target };\n    tokens.includes = tokeniser.consume(\"includes\");\n    if (!tokens.includes) {\n      tokeniser.unconsume(target.index);\n      return;\n    }\n    tokens.mixin = tokeniser.consume(\"identifier\") || tokeniser.error(\"Incomplete includes statement\");\n    tokens.termination = tokeniser.consume(\";\") || tokeniser.error(\"No terminating ; for includes statement\");\n    return new Includes({ source: tokeniser.source, tokens });\n  }\n\n  get type() {\n    return \"includes\";\n  }\n  get target() {\n    return unescape(this.tokens.target.value);\n  }\n  get includes() {\n    return unescape(this.tokens.mixin.value);\n  }\n}\n","import { Base } from \"./base\";\nimport { type_with_extended_attributes, unescape } from \"./helpers\";\n\nexport class Typedef extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const tokens = {};\n    const ret = new Typedef({ source: tokeniser.source, tokens });\n    tokens.base = tokeniser.consume(\"typedef\");\n    if (!tokens.base) {\n      return;\n    }\n    ret.idlType = type_with_extended_attributes(tokeniser, \"typedef-type\") || tokeniser.error(\"Typedef lacks a type\");\n    tokens.name = tokeniser.consume(\"identifier\") || tokeniser.error(\"Typedef lacks a name\");\n    tokeniser.current = ret;\n    tokens.termination = tokeniser.consume(\";\") || tokeniser.error(\"Unterminated typedef, expected `;`\");\n    return ret;\n  }\n\n  get type() {\n    return \"typedef\";\n  }\n  get name() {\n    return unescape(this.tokens.name.value);\n  }\n}\n","import { Base } from \"./base\";\nimport { return_type, argument_list, unescape } from \"./helpers\";\n\nexport class CallbackFunction extends Base {\n  /**\n   * @param {import(\"../tokeniser.js\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser, base) {\n    const tokens = { base };\n    const ret = new CallbackFunction({ source: tokeniser.source, tokens });\n    tokens.name = tokeniser.consume(\"identifier\") || tokeniser.error(\"Callback lacks a name\");\n    tokeniser.current = ret;\n    tokens.assign = tokeniser.consume(\"=\") || tokeniser.error(\"Callback lacks an assignment\");\n    ret.idlType = return_type(tokeniser) || tokeniser.error(\"Callback lacks a return type\");\n    tokens.open = tokeniser.consume(\"(\") || tokeniser.error(\"Callback lacks parentheses for arguments\");\n    ret.arguments = argument_list(tokeniser);\n    tokens.close = tokeniser.consume(\")\") || tokeniser.error(\"Unterminated callback\");\n    tokens.termination = tokeniser.consume(\";\") || tokeniser.error(\"Unterminated callback, expected `;`\");\n    return ret;\n  }\n\n  get type() {\n    return \"callback\";\n  }\n  get name() {\n    return unescape(this.tokens.name.value);\n  }\n}\n","import { Base } from \"./base.js\";\nimport { ExtendedAttributes } from \"./extended-attributes.js\";\nimport { unescape } from \"./helpers.js\";\n\n/**\n * @param {import(\"../tokeniser.js\").Tokeniser} tokeniser\n */\nfunction inheritance(tokeniser) {\n  const colon = tokeniser.consume(\":\");\n  if (!colon) {\n    return {};\n  }\n  const inheritance = tokeniser.consume(\"identifier\") || tokeniser.error(\"Inheritance lacks a type\");\n  return { colon, inheritance };\n}\n\nexport class Container extends Base {\n    /**\n     * @param {import(\"../tokeniser.js\").Tokeniser} tokeniser\n     * @param {*} instance\n     * @param {*} args\n     */\n    static parse(tokeniser, instance, { type, inheritable, allowedMembers }) {\n      const { tokens } = instance;\n      tokens.name = tokeniser.consume(\"identifier\") || tokeniser.error(`Missing name in ${instance.type}`);\n      tokeniser.current = instance;\n      if (inheritable) {\n        Object.assign(tokens, inheritance(tokeniser));\n      }\n      tokens.open = tokeniser.consume(\"{\") || tokeniser.error(`Bodyless ${type}`);\n      instance.members = [];\n      while (true) {\n        tokens.close = tokeniser.consume(\"}\");\n        if (tokens.close) {\n          tokens.termination = tokeniser.consume(\";\") || tokeniser.error(`Missing semicolon after ${type}`);\n          return instance;\n        }\n        const ea = ExtendedAttributes.parse(tokeniser);\n        let mem;\n        for (const [parser, ...args] of allowedMembers) {\n          mem = parser(tokeniser, ...args);\n          if (mem) {\n            break;\n          }\n        }\n        if (!mem) {\n          tokeniser.error(\"Unknown member\");\n        }\n        mem.extAttrs = ea;\n        instance.members.push(mem);\n      }\n    }\n\n    get partial() {\n      return !!this.tokens.partial;\n    }\n    get name() {\n      return unescape(this.tokens.name.value);\n    }\n    get inheritance() {\n      if (!this.tokens.inheritance) {\n        return null;\n      }\n      return unescape(this.tokens.inheritance.value);\n    }\n\n    *validate(defs) {\n      for (const member of this.members) {\n        if (member.validate) {\n          yield* member.validate(defs);\n        }\n      }\n    }\n  }\n","import { Base } from \"./base.js\";\nimport { Type } from \"./type.js\";\nimport { const_data, const_value, primitive_type } from \"./helpers.js\";\n\nexport class Constant extends Base {\n  /**\n   * @param {import(\"../tokeniser.js\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const tokens = {};\n    tokens.base = tokeniser.consume(\"const\");\n    if (!tokens.base) {\n      return;\n    }\n    let idlType = primitive_type(tokeniser);\n    if (!idlType) {\n      const base = tokeniser.consume(\"identifier\") || tokeniser.error(\"Const lacks a type\");\n      idlType = new Type({ source: tokeniser.source, tokens: { base } });\n    }\n    if (tokeniser.probe(\"?\")) {\n      tokeniser.error(\"Unexpected nullable constant type\");\n    }\n    idlType.type = \"const-type\";\n    tokens.name = tokeniser.consume(\"identifier\") || tokeniser.error(\"Const lacks a name\");\n    tokens.assign = tokeniser.consume(\"=\") || tokeniser.error(\"Const lacks value assignment\");\n    tokens.value = const_value(tokeniser) || tokeniser.error(\"Const lacks a value\");\n    tokens.termination = tokeniser.consume(\";\") || tokeniser.error(\"Unterminated const, expected `;`\");\n    const ret = new Constant({ source: tokeniser.source, tokens });\n    ret.idlType = idlType;\n    return ret;\n  }\n\n  get type() {\n    return \"const\";\n  }\n  get name() {\n    return unescape(this.tokens.name.value);\n  }\n  get value() {\n    return const_data(this.tokens.value);\n  }\n}\n","import { Base } from \"./base\";\nimport { type_with_extended_attributes } from \"./helpers\";\n\nexport class IterableLike extends Base {\n  /**\n   * @param {import(\"../tokeniser.js\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const start_position = tokeniser.position;\n    const tokens = {};\n    const ret = new IterableLike({ source: tokeniser.source, tokens });\n    tokens.readonly = tokeniser.consume(\"readonly\");\n    tokens.base = tokens.readonly ?\n      tokeniser.consume(\"maplike\", \"setlike\") :\n      tokeniser.consume(\"iterable\", \"maplike\", \"setlike\");\n    if (!tokens.base) {\n      tokeniser.unconsume(start_position);\n      return;\n    }\n\n    const { type } = ret;\n    const secondTypeRequired = type === \"maplike\";\n    const secondTypeAllowed = secondTypeRequired || type === \"iterable\";\n\n    tokens.open = tokeniser.consume(\"<\") || tokeniser.error(`Missing less-than sign \\`<\\` in ${type} declaration`);\n    const first = type_with_extended_attributes(tokeniser) || tokeniser.error(`Missing a type argument in ${type} declaration`);\n    ret.idlType = [first];\n    if (secondTypeAllowed) {\n      first.tokens.separator = tokeniser.consume(\",\");\n      if (first.tokens.separator) {\n        ret.idlType.push(type_with_extended_attributes(tokeniser));\n      }\n      else if (secondTypeRequired)\n      tokeniser.error(`Missing second type argument in ${type} declaration`);\n    }\n    tokens.close = tokeniser.consume(\">\") || tokeniser.error(`Missing greater-than sign \\`>\\` in ${type} declaration`);\n    tokens.termination = tokeniser.consume(\";\") || tokeniser.error(`Missing semicolon after ${type} declaration`);\n\n    return ret;\n  }\n\n  get type() {\n    return this.tokens.base.value;\n  }\n  get readonly() {\n    return !!this.tokens.readonly;\n  }\n}\n","import { Container } from \"./container.js\";\nimport { Attribute } from \"./attribute.js\";\nimport { Operation } from \"./operation.js\";\nimport { Constant } from \"./constant.js\";\nimport { IterableLike } from \"./iterable.js\";\nimport { stringifier } from \"./helpers.js\";\nimport { validationError } from \"../error.js\";\nimport { checkInterfaceMemberDuplication } from \"../validators/interface.js\";\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n */\nfunction static_member(tokeniser) {\n  const special = tokeniser.consume(\"static\");\n  if (!special) return;\n  const member = Attribute.parse(tokeniser, { special }) ||\n    Operation.parse(tokeniser, { special }) ||\n    tokeniser.error(\"No body in static member\");\n  return member;\n}\n\nexport class Interface extends Container {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser, base, { partial = null } = {}) {\n    const tokens = { partial, base };\n    return Container.parse(tokeniser, new Interface({ source: tokeniser.source, tokens }), {\n      type: \"interface\",\n      inheritable: !partial,\n      allowedMembers: [\n        [Constant.parse],\n        [static_member],\n        [stringifier],\n        [IterableLike.parse],\n        [Attribute.parse],\n        [Operation.parse]\n      ]\n    });\n  }\n\n  get type() {\n    return \"interface\";\n  }\n\n  *validate(defs) {\n    yield* this.extAttrs.validate(defs);\n    if (\n      !this.partial &&\n      this.extAttrs.every(extAttr => extAttr.name !== \"Exposed\") &&\n      this.extAttrs.every(extAttr => extAttr.name !== \"NoInterfaceObject\")\n    ) {\n      const message = `Interfaces must have \\`[Exposed]\\` extended attribute. \\\nTo fix, add, for example, \\`[Exposed=Window]\\`. Please also consider carefully \\\nif your interface should also be exposed in a Worker scope. Refer to the \\\n[WebIDL spec section on Exposed](https://heycam.github.io/webidl/#Exposed) \\\nfor more information.`;\n      yield validationError(this.source, this.tokens.name, this, message);\n    }\n\n    yield* super.validate(defs);\n    if (!this.partial) {\n      yield* checkInterfaceMemberDuplication(defs, this);\n    }\n  }\n}\n","import { validationError } from \"../error.js\";\n\nexport function* checkInterfaceMemberDuplication(defs, i) {\n  const opNames = new Set(getOperations(i).map(op => op.name));\n  const partials = defs.partials.get(i.name) || [];\n  const mixins = defs.mixinMap.get(i.name) || [];\n  for (const ext of [...partials, ...mixins]) {\n    const additions = getOperations(ext);\n    yield* forEachExtension(additions, opNames, ext, i);\n    for (const addition of additions) {\n      opNames.add(addition.name);\n    }\n  }\n\n  function* forEachExtension(additions, existings, ext, base) {\n    for (const addition of additions) {\n      const { name } = addition;\n      if (name && existings.has(name)) {\n        const message = `The operation \"${name}\" has already been defined for the base interface \"${base.name}\" either in itself or in a mixin`;\n        yield validationError(ext.source, addition.tokens.name, ext, message);\n      }\n    }\n  }\n\n  function getOperations(i) {\n    return i.members\n      .filter(({type}) => type === \"operation\");\n  }\n}\n","import { Container } from \"./container.js\";\nimport { Constant } from \"./constant.js\";\nimport { Attribute } from \"./attribute.js\";\nimport { Operation } from \"./operation.js\";\nimport { stringifier } from \"./helpers.js\";\n\nexport class Mixin extends Container {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser, base, { partial } = {}) {\n    const tokens = { partial, base };\n    tokens.mixin = tokeniser.consume(\"mixin\");\n    if (!tokens.mixin) {\n      return;\n    }\n    return Container.parse(tokeniser, new Mixin({ source: tokeniser.source, tokens }), {\n      type: \"interface mixin\",\n      allowedMembers: [\n        [Constant.parse],\n        [stringifier],\n        [Attribute.parse, { noInherit: true }],\n        [Operation.parse, { regular: true }]\n      ]\n    });\n  }\n\n  get type() {\n    return \"interface mixin\";\n  }\n}\n","import { Base } from \"./base.js\";\nimport { unescape, type_with_extended_attributes } from \"./helpers.js\";\nimport { ExtendedAttributes } from \"./extended-attributes.js\";\nimport { Default } from \"./default.js\";\n\nexport class Field extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const tokens = {};\n    const ret = new Field({ source: tokeniser.source, tokens });\n    ret.extAttrs = ExtendedAttributes.parse(tokeniser);\n    tokens.required = tokeniser.consume(\"required\");\n    ret.idlType = type_with_extended_attributes(tokeniser, \"dictionary-type\") || tokeniser.error(\"Dictionary member lacks a type\");\n    tokens.name = tokeniser.consume(\"identifier\") || tokeniser.error(\"Dictionary member lacks a name\");\n    ret.default = Default.parse(tokeniser);\n    if (tokens.required && ret.default) tokeniser.error(\"Required member must not have a default\");\n    tokens.termination = tokeniser.consume(\";\") || tokeniser.error(\"Unterminated dictionary member, expected `;`\");\n    return ret;\n  }\n\n  get type() {\n    return \"field\";\n  }\n  get name() {\n    return unescape(this.tokens.name.value);\n  }\n  get required() {\n    return !!this.tokens.required;\n  }\n}\n","import { Container } from \"./container.js\";\nimport { Field } from \"./field.js\";\n\nexport class Dictionary extends Container {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser, { partial } = {}) {\n    const tokens = { partial };\n    tokens.base = tokeniser.consume(\"dictionary\");\n    if (!tokens.base) {\n      return;\n    }\n    return Container.parse(tokeniser, new Dictionary({ source: tokeniser.source, tokens }), {\n      type: \"dictionary\",\n      inheritable: !partial,\n      allowedMembers: [\n        [Field.parse],\n      ]\n    });\n  }\n\n  get type() {\n    return \"dictionary\";\n  }\n}\n","import { Container } from \"./container.js\";\nimport { Attribute } from \"./attribute.js\";\nimport { Operation } from \"./operation.js\";\nimport { validationError } from \"../error.js\";\n\nexport class Namespace extends Container {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser, { partial } = {}) {\n    const tokens = { partial };\n    tokens.base = tokeniser.consume(\"namespace\");\n    if (!tokens.base) {\n      return;\n    }\n    return Container.parse(tokeniser, new Namespace({ source: tokeniser.source, tokens }), {\n      type: \"namespace\",\n      allowedMembers: [\n        [Attribute.parse, { noInherit: true, readonly: true }],\n        [Operation.parse, { regular: true }]\n      ]\n    });\n  }\n\n  get type() {\n    return \"namespace\";\n  }\n\n  *validate(defs) {\n    if (!this.partial && this.extAttrs.every(extAttr => extAttr.name !== \"Exposed\")) {\n      const message = `Namespaces must have [Exposed] extended attribute. \\\nTo fix, add, for example, [Exposed=Window]. Please also consider carefully \\\nif your namespace should also be exposed in a Worker scope. Refer to the \\\n[WebIDL spec section on Exposed](https://heycam.github.io/webidl/#Exposed) \\\nfor more information.`;\n      yield validationError(this.source, this.tokens.name, this, message);\n    }\n    yield* super.validate(defs);\n  }\n}\n","import { Container } from \"./container.js\";\nimport { Operation } from \"./operation.js\";\nimport { Constant } from \"./constant.js\";\n\n\nexport class CallbackInterface extends Container {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser, callback, { partial = null } = {}) {\n    const tokens = { callback };\n    tokens.base = tokeniser.consume(\"interface\");\n    if (!tokens.base) {\n      return;\n    }\n    return Container.parse(tokeniser, new CallbackInterface({ source: tokeniser.source, tokens }), {\n      type: \"callback interface\",\n      inheritable: !partial,\n      allowedMembers: [\n        [Constant.parse],\n        [Operation.parse, { regular: true }]\n      ]\n    });\n  }\n\n  get type() {\n    return \"callback interface\";\n  }\n}\n","\"use strict\";\n\nimport { Tokeniser } from \"./tokeniser.js\";\nimport { Enum } from \"./productions/enum.js\";\nimport { Includes } from \"./productions/includes.js\";\nimport { ExtendedAttributes } from \"./productions/extended-attributes.js\";\nimport { Typedef } from \"./productions/typedef.js\";\nimport { CallbackFunction } from \"./productions/callback.js\";\nimport { Interface } from \"./productions/interface.js\";\nimport { Mixin } from \"./productions/mixin.js\";\nimport { Dictionary } from \"./productions/dictionary.js\";\nimport { Namespace } from \"./productions/namespace.js\";\nimport { CallbackInterface } from \"./productions/callback-interface.js\";\n\n/**\n * @param {Tokeniser} tokeniser\n * @param {object} options\n * @param {boolean} [options.concrete]\n */\nfunction parseByTokens(tokeniser, options) {\n  const source = tokeniser.source;\n\n  function error(str) {\n    tokeniser.error(str);\n  }\n\n  function consume(...candidates) {\n    return tokeniser.consume(...candidates);\n  }\n\n  function callback() {\n    const callback = consume(\"callback\");\n    if (!callback) return;\n    if (tokeniser.probe(\"interface\")) {\n      return CallbackInterface.parse(tokeniser, callback);\n    }\n    return CallbackFunction.parse(tokeniser, callback);\n  }\n\n  function interface_(opts) {\n    const base = consume(\"interface\");\n    if (!base) return;\n    const ret = Mixin.parse(tokeniser, base, opts) ||\n      Interface.parse(tokeniser, base, opts) ||\n      error(\"Interface has no proper body\");\n    return ret;\n  }\n\n  function partial() {\n    const partial = consume(\"partial\");\n    if (!partial) return;\n    return Dictionary.parse(tokeniser, { partial }) ||\n      interface_({ partial }) ||\n      Namespace.parse(tokeniser, { partial }) ||\n      error(\"Partial doesn't apply to anything\");\n  }\n\n  function definition() {\n    return callback() ||\n      interface_() ||\n      partial() ||\n      Dictionary.parse(tokeniser) ||\n      Enum.parse(tokeniser) ||\n      Typedef.parse(tokeniser) ||\n      Includes.parse(tokeniser) ||\n      Namespace.parse(tokeniser);\n  }\n\n  function definitions() {\n    if (!source.length) return [];\n    const defs = [];\n    while (true) {\n      const ea = ExtendedAttributes.parse(tokeniser);\n      const def = definition();\n      if (!def) {\n        if (ea.length) error(\"Stray extended attributes\");\n        break;\n      }\n      def.extAttrs = ea;\n      defs.push(def);\n    }\n    const eof = consume(\"eof\");\n    if (options.concrete) {\n      defs.push(eof);\n    }\n    return defs;\n  }\n  const res = definitions();\n  if (tokeniser.position < source.length) error(\"Unrecognised tokens\");\n  return res;\n}\n\nexport function parse(str, options = {}) {\n  const tokeniser = new Tokeniser(str);\n  if (typeof options.sourceName !== \"undefined\") {\n    tokeniser.source.name = options.sourceName;\n  }\n  return parseByTokens(tokeniser, options);\n}\n","\"use strict\";\n\nfunction noop(arg) {\n  return arg;\n}\n\nconst templates = {\n  wrap: items => items.join(\"\"),\n  trivia: noop,\n  name: noop,\n  reference: noop,\n  type: noop,\n  generic: noop,\n  inheritance: noop,\n  definition: noop,\n  extendedAttribute: noop,\n  extendedAttributeReference: noop\n};\n\nexport function write(ast, { templates: ts = templates } = {}) {\n  ts = Object.assign({}, templates, ts);\n\n  function reference(raw, { unescaped, context }) {\n    if (!unescaped) {\n      unescaped = raw.startsWith(\"_\") ? raw.slice(1) : raw;\n    }\n    return ts.reference(raw, unescaped, context);\n  }\n\n  function token(t, wrapper = noop, ...args) {\n    if (!t) {\n      return \"\";\n    }\n    const value = wrapper(t.value, ...args);\n    return ts.wrap([ts.trivia(t.trivia), value]);\n  }\n\n  function reference_token(t, context) {\n    return token(t, reference, { context });\n  }\n\n  function name_token(t, arg) {\n    return token(t, ts.name, arg);\n  }\n\n  function type_body(it) {\n    if (it.union || it.generic) {\n      return ts.wrap([\n        token(it.tokens.base, ts.generic),\n        token(it.tokens.open),\n        ...it.subtype.map(type),\n        token(it.tokens.close)\n      ]);\n    }\n    const firstToken = it.tokens.prefix || it.tokens.base;\n    const prefix = it.tokens.prefix ? [\n      it.tokens.prefix.value,\n      ts.trivia(it.tokens.base.trivia)\n    ] : [];\n    const ref = reference(ts.wrap([\n      ...prefix,\n      it.tokens.base.value,\n      token(it.tokens.postfix)\n    ]), { unescaped: it.idlType, context: it });\n    return ts.wrap([ts.trivia(firstToken.trivia), ref]);\n  }\n  function type(it) {\n    return ts.wrap([\n      extended_attributes(it.extAttrs),\n      type_body(it),\n      token(it.tokens.nullable),\n      token(it.tokens.separator)\n    ]);\n  }\n  function default_(def) {\n    if (!def) {\n      return \"\";\n    }\n    return ts.wrap([\n      token(def.tokens.assign),\n      ...def.expression.map(t => token(t))\n    ]);\n  }\n  function argument(arg) {\n    return ts.wrap([\n      extended_attributes(arg.extAttrs),\n      token(arg.tokens.optional),\n      ts.type(type(arg.idlType)),\n      token(arg.tokens.variadic),\n      name_token(arg.tokens.name, { data: arg }),\n      default_(arg.default),\n      token(arg.tokens.separator)\n    ]);\n  }\n  function identifier(id, context) {\n    return ts.wrap([\n      reference_token(id.tokens.value, context),\n      token(id.tokens.separator)\n    ]);\n  }\n  function make_ext_at(it) {\n    const { rhsType } = it.params;\n    return ts.wrap([\n      ts.trivia(it.tokens.name.trivia),\n      ts.extendedAttribute(ts.wrap([\n        ts.extendedAttributeReference(it.name),\n        token(it.params.tokens.assign),\n        reference_token(it.params.tokens.secondaryName, it),\n        token(it.params.tokens.open),\n        ...!it.params.list ? [] :\n          it.params.list.map(\n            rhsType === \"identifier-list\" ? id => identifier(id, it) : argument\n          ),\n        token(it.params.tokens.close)\n      ])),\n      token(it.tokens.separator)\n    ]);\n  }\n  function extended_attributes(eats) {\n    if (!eats.length) return \"\";\n    return ts.wrap([\n      token(eats.tokens.open),\n      ...eats.map(make_ext_at),\n      token(eats.tokens.close)\n    ]);\n  }\n\n  function operation(it, parent) {\n    const body = it.idlType ? [\n      ts.type(type(it.idlType)),\n      name_token(it.tokens.name, { data: it, parent }),\n      token(it.tokens.open),\n      ts.wrap(it.arguments.map(argument)),\n      token(it.tokens.close),\n    ] : [];\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      token(it.tokens.special),\n      ...body,\n      token(it.tokens.termination)\n    ]), { data: it, parent });\n  }\n\n  function attribute(it, parent) {\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      token(it.tokens.special),\n      token(it.tokens.readonly),\n      token(it.tokens.base),\n      ts.type(type(it.idlType)),\n      name_token(it.tokens.name, { data: it, parent }),\n      token(it.tokens.termination)\n    ]), { data: it, parent });\n  }\n\n  function inheritance(inh) {\n    if (!inh.tokens.inheritance) {\n      return \"\";\n    }\n    return ts.wrap([\n      token(inh.tokens.colon),\n      ts.trivia(inh.tokens.inheritance.trivia),\n      ts.inheritance(reference(inh.tokens.inheritance.value, { context: inh }))\n    ]);\n  }\n\n  function container(it) {\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      token(it.tokens.callback),\n      token(it.tokens.partial),\n      token(it.tokens.base),\n      token(it.tokens.mixin),\n      name_token(it.tokens.name, { data: it }),\n      inheritance(it),\n      token(it.tokens.open),\n      iterate(it.members, it),\n      token(it.tokens.close),\n      token(it.tokens.termination)\n    ]), { data: it });\n  }\n\n  function field(it, parent) {\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      token(it.tokens.required),\n      ts.type(type(it.idlType)),\n      name_token(it.tokens.name, { data: it, parent }),\n      default_(it.default),\n      token(it.tokens.termination)\n    ]), { data: it, parent });\n  }\n  function const_(it, parent) {\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      token(it.tokens.base),\n      ts.type(type(it.idlType)),\n      name_token(it.tokens.name, { data: it, parent }),\n      token(it.tokens.assign),\n      token(it.tokens.value),\n      token(it.tokens.termination)\n    ]), { data: it, parent });\n  }\n  function typedef(it) {\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      token(it.tokens.base),\n      ts.type(type(it.idlType)),\n      name_token(it.tokens.name, { data: it }),\n      token(it.tokens.termination)\n    ]), { data: it });\n  }\n  function includes(it) {\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      reference_token(it.tokens.target, it),\n      token(it.tokens.includes),\n      reference_token(it.tokens.mixin, it),\n      token(it.tokens.termination)\n    ]), { data: it });\n  }\n  function callback(it) {\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      token(it.tokens.base),\n      name_token(it.tokens.name, { data: it }),\n      token(it.tokens.assign),\n      ts.type(type(it.idlType)),\n      token(it.tokens.open),\n      ...it.arguments.map(argument),\n      token(it.tokens.close),\n      token(it.tokens.termination),\n    ]), { data: it });\n  }\n  function enum_(it) {\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      token(it.tokens.base),\n      name_token(it.tokens.name, { data: it }),\n      token(it.tokens.open),\n      iterate(it.values, it),\n      token(it.tokens.close),\n      token(it.tokens.termination)\n    ]), { data: it });\n  }\n  function enum_value(v, parent) {\n    return ts.wrap([\n      ts.trivia(v.tokens.value.trivia),\n      ts.definition(\n        ts.wrap(['\"', ts.name(v.value, { data: v, parent }), '\"']),\n        { data: v, parent }\n      ),\n      token(v.tokens.separator)\n    ]);\n  }\n  function iterable_like(it, parent) {\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      token(it.tokens.readonly),\n      token(it.tokens.base, ts.generic),\n      token(it.tokens.open),\n      ts.wrap(it.idlType.map(type)),\n      token(it.tokens.close),\n      token(it.tokens.termination)\n    ]), { data: it, parent });\n  }\n  function eof(it) {\n    return ts.trivia(it.trivia);\n  }\n\n  const table = {\n    interface: container,\n    \"interface mixin\": container,\n    namespace: container,\n    operation,\n    attribute,\n    dictionary: container,\n    field,\n    const: const_,\n    typedef,\n    includes,\n    callback,\n    enum: enum_,\n    \"enum-value\": enum_value,\n    iterable: iterable_like,\n    legacyiterable: iterable_like,\n    maplike: iterable_like,\n    setlike: iterable_like,\n    \"callback interface\": container,\n    eof\n  };\n  function dispatch(it, parent) {\n    const dispatcher = table[it.type];\n    if (!dispatcher) {\n      throw new Error(`Type \"${it.type}\" is unsupported`);\n    }\n    return table[it.type](it, parent);\n  }\n  function iterate(things, parent) {\n    if (!things) return;\n    const results = things.map(thing => dispatch(thing, parent));\n    return ts.wrap(results);\n  }\n  return iterate(ast);\n}\n","\"use strict\";\n\nimport { validationError as error } from \"./error.js\";\n\nfunction getMixinMap(all, unique) {\n  const map = new Map();\n  const includes = all.filter(def => def.type === \"includes\");\n  for (const include of includes) {\n    const mixin = unique.get(include.includes);\n    if (!mixin) {\n      continue;\n    }\n    const array = map.get(include.target);\n    if (array) {\n      array.push(mixin);\n    } else {\n      map.set(include.target, [mixin]);\n    }\n  }\n  return map;\n}\n\nfunction groupDefinitions(all) {\n  const unique = new Map();\n  const duplicates = new Set();\n  const partials = new Map();\n  for (const def of all) {\n    if (def.partial) {\n      const array = partials.get(def.name);\n      if (array) {\n        array.push(def);\n      } else {\n        partials.set(def.name, [def]);\n      }\n      continue;\n    }\n    if (!def.name) {\n      continue;\n    }\n    if (!unique.has(def.name)) {\n      unique.set(def.name, def);\n    } else {\n      duplicates.add(def);\n    }\n  }\n  return {\n    all,\n    unique,\n    partials,\n    duplicates,\n    mixinMap: getMixinMap(all, unique),\n    cache: {\n      typedefIncludesDictionary: new WeakMap()\n    },\n  };\n}\n\nfunction* checkDuplicatedNames({ unique, duplicates }) {\n  for (const dup of duplicates) {\n    const { name } = dup;\n    const message = `The name \"${name}\" of type \"${unique.get(name).type}\" was already seen`;\n    yield error(dup.source, dup.tokens.name, dup, message);\n  }\n}\n\nfunction* validateIterable(ast) {\n  const defs = groupDefinitions(ast);\n  for (const def of defs.all) {\n    if (def.validate) {\n      yield* def.validate(defs);\n    }\n  }\n  yield* checkDuplicatedNames(defs);\n}\n\n// Remove this once all of our support targets expose `.flat()` by default\nfunction flatten(array) {\n  if (array.flat) {\n    return array.flat();\n  }\n  return [].concat(...array);\n}\n\n/**\n * @param {*} ast AST or array of ASTs\n */\nexport function validate(ast) {\n  return [...validateIterable(flatten(ast))];\n}\n","export { parse } from \"./lib/webidl2.js\";\nexport { write } from \"./lib/writer.js\";\nexport { validate } from \"./lib/validator.js\";\n"],"sourceRoot":""}