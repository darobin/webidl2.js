{"version":3,"sources":["webpack://WebIDL2/webpack/universalModuleDefinition","webpack://WebIDL2/webpack/bootstrap","webpack://WebIDL2/./lib/error.js","webpack://WebIDL2/./lib/tokeniser.js","webpack://WebIDL2/./lib/productions/base.js","webpack://WebIDL2/./lib/productions/type.js","webpack://WebIDL2/./lib/productions/default.js","webpack://WebIDL2/./lib/productions/array-base.js","webpack://WebIDL2/./lib/productions/extended-attributes.js","webpack://WebIDL2/./lib/productions/helpers.js","webpack://WebIDL2/./lib/productions/argument.js","webpack://WebIDL2/./lib/validators/helpers.js","webpack://WebIDL2/./lib/productions/token.js","webpack://WebIDL2/./lib/productions/operation.js","webpack://WebIDL2/./lib/productions/attribute.js","webpack://WebIDL2/./lib/productions/enum.js","webpack://WebIDL2/./lib/productions/includes.js","webpack://WebIDL2/./lib/productions/typedef.js","webpack://WebIDL2/./lib/productions/callback.js","webpack://WebIDL2/./lib/productions/container.js","webpack://WebIDL2/./lib/productions/constant.js","webpack://WebIDL2/./lib/productions/iterable.js","webpack://WebIDL2/./lib/productions/interface.js","webpack://WebIDL2/./lib/validators/interface.js","webpack://WebIDL2/./lib/productions/mixin.js","webpack://WebIDL2/./lib/productions/field.js","webpack://WebIDL2/./lib/productions/dictionary.js","webpack://WebIDL2/./lib/productions/namespace.js","webpack://WebIDL2/./lib/productions/callback-interface.js","webpack://WebIDL2/./lib/webidl2.js","webpack://WebIDL2/./lib/writer.js","webpack://WebIDL2/./lib/validator.js","webpack://WebIDL2/./index.js"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","error_error","source","position","current","message","type","sliceTokens","count","slice","Math","max","tokensToText","inputs","precedes","text","map","trivia","join","nextToken","length","line","precedingLastLine","splitted","split","lastLine","subsequentTokens","subsequentText","sourceContext","repeat","contextType","context","partial","bareMessage","sourceName","input","tokens","validationError","token","index","tokenRe","decimal","integer","identifier","string","whitespace","comment","other","stringTypes","argumentNameKeywords","nonRegexTerminals","concat","punctuations","tokeniser_Tokeniser","[object Object]","idl","str","lastCharIndex","nextChar","charAt","result","test","attemptTokenMatch","noFlushTrivia","currentTrivia","pop","match","includes","punctuation","startsWith","push","Error","re","lastIndex","exec","tokenise","WebIDLParseError","syntaxError","candidates","probe","super","Base","defineProperties","json","undefined","inheritance","proto","descMap","getOwnPropertyDescriptors","entries","getPrototypeOf","type_suffix","tokeniser","obj","nullable","consume","error","single_type","typeName","ret","base","type_Type","open","subtype","return_type","type_with_extended_attributes","keyType","keyIdlType","separator","valueType","idlType","close","generic_type","primitive_type","generic","typ","or","union_type","extAttrs","Boolean","union","helpers_unescape","prefix","postfix","filter","default_Default","assign","def","const_value","expression","const_data","negative","ArrayBase","Array","extended_attributes_ExtendedAttributeParameters","secondaryName","list","rhsType","ids","parser","token_Token","listName","identifiers","argument_list","hasRhs","extended_attributes_SimpleExtendedAttribute","params","parse","rhs","arguments","extended_attributes_ExtendedAttributes","argument_Argument","start_position","optional","variadic","default","unconsume","defs","idlTypeIncludesDictionary","unique","operation_Operation","special","regular","termination","argument","validate","attribute_Attribute","noInherit","readonly","allowDangler","first","items","item","num_type","integer_type","decimal_type","voidToken","stringifier","enum_EnumValue","enum_Enum","values","includes_Includes","target","mixin","typedef_Typedef","callback_CallbackFunction","container_Container","instance","inheritable","allowedMembers","colon","members","ea","mem","args","member","constant_Constant","unescape","iterable_IterableLike","secondTypeRequired","secondTypeAllowed","static_member","interface_Interface","every","extAttr","opNames","Set","getOperations","op","partials","mixins","mixinMap","ext","additions","forEachExtension","addition","add","existings","has","checkInterfaceMemberDuplication","mixin_Mixin","field_Field","required","dictionary_Dictionary","namespace_Namespace","callback_interface_CallbackInterface","callback","parseByTokens","options","interface_","opts","definition","res","eof","concrete","definitions","noop","arg","templates","wrap","reference","extendedAttribute","extendedAttributeReference","write","ast","ts","raw","unescaped","wrapper","reference_token","name_token","type_body","it","firstToken","ref","extended_attributes","default_","data","make_ext_at","id","eats","container","inh","iterate","iterable_like","parent","table","interface","interface mixin","namespace","operation","body","attribute","dictionary","field","const","typedef","enum","enum-value","v","iterable","legacyiterable","maplike","setlike","callback interface","things","results","thing","dispatch","getMixinMap","all","Map","include","array","set","validateIterable","duplicates","groupDefinitions","dup","checkDuplicatedNames","flat","__webpack_exports__"],"mappings":"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","file":"webidl2.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WebIDL2\"] = factory();\n\telse\n\t\troot[\"WebIDL2\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * @param {string} text\n */\nfunction lastLine(text) {\n  const splitted = text.split(\"\\n\");\n  return splitted[splitted.length - 1];\n}\n\n/**\n * @param {string} message error message\n * @param {\"Syntax\" | \"Validation\"} type error type\n */\nfunction error(source, position, current, message, type) {\n  /**\n   * @param {number} count\n   */\n  function sliceTokens(count) {\n    return count > 0 ?\n      source.slice(position, position + count) :\n      source.slice(Math.max(position + count, 0), position);\n  }\n\n  function tokensToText(inputs, { precedes } = {}) {\n    const text = inputs.map(t => t.trivia + t.value).join(\"\");\n    const nextToken = source[position];\n    if (nextToken.type === \"eof\") {\n      return text;\n    }\n    if (precedes) {\n      return text + nextToken.trivia;\n    }\n    return text.slice(nextToken.trivia.length);\n  }\n\n  const maxTokens = 5; // arbitrary but works well enough\n  const line =\n    source[position].type !== \"eof\" ? source[position].line :\n    source.length > 1 ? source[position - 1].line :\n    1;\n\n  const precedingLastLine = lastLine(\n    tokensToText(sliceTokens(-maxTokens), { precedes: true })\n  );\n\n  const subsequentTokens = sliceTokens(maxTokens);\n  const subsequentText = tokensToText(subsequentTokens);\n  const subsequentFirstLine = subsequentText.split(\"\\n\")[0];\n\n  const spaced = \" \".repeat(precedingLastLine.length) + \"^\";\n  const sourceContext = precedingLastLine + subsequentFirstLine + \"\\n\" + spaced;\n\n  const contextType = type === \"Syntax\" ? \"since\" : \"inside\";\n  const inSourceName = source.name ? ` in ${source.name}` : \"\";\n  const grammaticalContext = current ? `, ${contextType} \\`${current.partial ? \"partial \" : \"\"}${current.type} ${current.name}\\`` : \"\";\n  const context = `${type} error at line ${line}${inSourceName}${grammaticalContext}:\\n${sourceContext}`;\n  return {\n    message: `${context} ${message}`,\n    bareMessage: message,\n    context,\n    line,\n    sourceName: source.name,\n    input: subsequentText,\n    tokens: subsequentTokens\n  };\n}\n\n/**\n * @param {string} message error message\n */\nexport function syntaxError(source, position, current, message) {\n  return error(source, position, current, message, \"Syntax\");\n}\n\n/**\n * @param {string} message error message\n */\nexport function validationError(source, token, current, message) {\n  return error(source, token.index, current, message, \"Validation\");\n}\n","import { syntaxError } from \"./error.js\";\n\n// These regular expressions use the sticky flag so they will only match at\n// the current location (ie. the offset of lastIndex).\nconst tokenRe = {\n  // This expression uses a lookahead assertion to catch false matches\n  // against integers early.\n  \"decimal\": /-?(?=[0-9]*\\.|[0-9]+[eE])(([0-9]+\\.[0-9]*|[0-9]*\\.[0-9]+)([Ee][-+]?[0-9]+)?|[0-9]+[Ee][-+]?[0-9]+)/y,\n  \"integer\": /-?(0([Xx][0-9A-Fa-f]+|[0-7]*)|[1-9][0-9]*)/y,\n  \"identifier\": /[_-]?[A-Za-z][0-9A-Z_a-z-]*/y,\n  \"string\": /\"[^\"]*\"/y,\n  \"whitespace\": /[\\t\\n\\r ]+/y,\n  \"comment\": /((\\/(\\/.*|\\*([^*]|\\*[^/])*\\*\\/)[\\t\\n\\r ]*)+)/y,\n  \"other\": /[^\\t\\n\\r 0-9A-Za-z]/y\n};\n\nexport const stringTypes = [\n  \"ByteString\",\n  \"DOMString\",\n  \"USVString\"\n];\n\nexport const argumentNameKeywords = [\n  \"attribute\",\n  \"callback\",\n  \"const\",\n  \"deleter\",\n  \"dictionary\",\n  \"enum\",\n  \"getter\",\n  \"includes\",\n  \"inherit\",\n  \"interface\",\n  \"iterable\",\n  \"maplike\",\n  \"namespace\",\n  \"partial\",\n  \"required\",\n  \"setlike\",\n  \"setter\",\n  \"static\",\n  \"stringifier\",\n  \"typedef\",\n  \"unrestricted\"\n];\n\nconst nonRegexTerminals = [\n  \"-Infinity\",\n  \"FrozenArray\",\n  \"Infinity\",\n  \"NaN\",\n  \"Promise\",\n  \"boolean\",\n  \"byte\",\n  \"double\",\n  \"false\",\n  \"float\",\n  \"implements\",\n  \"legacyiterable\",\n  \"long\",\n  \"mixin\",\n  \"null\",\n  \"octet\",\n  \"optional\",\n  \"or\",\n  \"readonly\",\n  \"record\",\n  \"sequence\",\n  \"short\",\n  \"true\",\n  \"unsigned\",\n  \"void\"\n].concat(argumentNameKeywords, stringTypes);\n\nconst punctuations = [\n  \"(\",\n  \")\",\n  \",\",\n  \"...\",\n  \":\",\n  \";\",\n  \"<\",\n  \"=\",\n  \">\",\n  \"?\",\n  \"[\",\n  \"]\",\n  \"{\",\n  \"}\"\n];\n\n/**\n * @param {string} str\n */\nfunction tokenise(str) {\n  const tokens = [];\n  let lastCharIndex = 0;\n  let trivia = \"\";\n  let line = 1;\n  let index = 0;\n  while (lastCharIndex < str.length) {\n    const nextChar = str.charAt(lastCharIndex);\n    let result = -1;\n\n    if (/[\\t\\n\\r ]/.test(nextChar)) {\n      result = attemptTokenMatch(\"whitespace\", { noFlushTrivia: true });\n    } else if (nextChar === '/') {\n      result = attemptTokenMatch(\"comment\", { noFlushTrivia: true });\n    }\n\n    if (result !== -1) {\n      const currentTrivia = tokens.pop().value;\n      line += (currentTrivia.match(/\\n/g) || []).length;\n      trivia += currentTrivia;\n      index -= 1;\n    } else if (/[-0-9.A-Z_a-z]/.test(nextChar)) {\n      result = attemptTokenMatch(\"decimal\");\n      if (result === -1) {\n        result = attemptTokenMatch(\"integer\");\n      }\n      if (result === -1) {\n        result = attemptTokenMatch(\"identifier\");\n        const token = tokens[tokens.length - 1];\n        if (result !== -1 && nonRegexTerminals.includes(token.value)) {\n          token.type = token.value;\n        }\n      }\n    } else if (nextChar === '\"') {\n      result = attemptTokenMatch(\"string\");\n    }\n\n    for (const punctuation of punctuations) {\n      if (str.startsWith(punctuation, lastCharIndex)) {\n        tokens.push({ type: punctuation, value: punctuation, trivia, line, index });\n        trivia = \"\";\n        lastCharIndex += punctuation.length;\n        result = lastCharIndex;\n        break;\n      }\n    }\n\n    // other as the last try\n    if (result === -1) {\n      result = attemptTokenMatch(\"other\");\n    }\n    if (result === -1) {\n      throw new Error(\"Token stream not progressing\");\n    }\n    lastCharIndex = result;\n    index += 1;\n  }\n\n  // remaining trivia as eof\n  tokens.push({\n    type: \"eof\",\n    value: \"\",\n    trivia\n  });\n\n  return tokens;\n\n  /**\n   * @param {keyof tokenRe} type\n   * @param {object} [options]\n   * @param {boolean} [options.noFlushTrivia]\n   */\n  function attemptTokenMatch(type, { noFlushTrivia } = {}) {\n    const re = tokenRe[type];\n    re.lastIndex = lastCharIndex;\n    const result = re.exec(str);\n    if (result) {\n      tokens.push({ type, value: result[0], trivia, line, index });\n      if (!noFlushTrivia) {\n        trivia = \"\";\n      }\n      return re.lastIndex;\n    }\n    return -1;\n  }\n}\n\nexport class Tokeniser {\n  /**\n   * @param {string} idl\n   */\n  constructor(idl) {\n    this.source = tokenise(idl);\n    this.position = 0;\n  }\n\n  /**\n   * @param {string} message\n   */\n  error(message) {\n    throw new WebIDLParseError(syntaxError(this.source, this.position, this.current, message));\n  }\n\n  /**\n   * @param {string} type\n   */\n  probe(type) {\n    return this.source.length > this.position && this.source[this.position].type === type;\n  }\n\n  /**\n   * @param  {...string} candidates\n   */\n  consume(...candidates) {\n    for (const type of candidates) {\n      if (!this.probe(type)) continue;\n      const token = this.source[this.position];\n      this.position++;\n      return token;\n    }\n  }\n\n  /**\n   * @param {number} position\n   */\n  unconsume(position) {\n    this.position = position;\n  }\n}\n\nclass WebIDLParseError extends Error {\n  constructor({ message, bareMessage, context, line, sourceName, input, tokens }) {\n    super(message);\n\n    this.name = \"WebIDLParseError\"; // not to be mangled\n    this.bareMessage = bareMessage;\n    this.context = context;\n    this.line = line;\n    this.sourceName = sourceName;\n    this.input = input;\n    this.tokens = tokens;\n  }\n}\n","export class Base {\n  constructor({ source, tokens }) {\n    Object.defineProperties(this, {\n      source: { value: source },\n      tokens: { value: tokens }\n    });\n  }\n\n  toJSON() {\n    const json = { type: undefined, name: undefined, inheritance: undefined };\n    let proto = this;\n    while (proto !== Object.prototype) {\n      const descMap = Object.getOwnPropertyDescriptors(proto);\n      for (const [key, value] of Object.entries(descMap)) {\n        if (value.enumerable || value.get) {\n          json[key] = this[key];\n        }\n      }\n      proto = Object.getPrototypeOf(proto);\n    }\n    return json;\n  }\n}\n","import { Base } from \"./base.js\";\nimport { unescape, type_with_extended_attributes, return_type, primitive_type } from \"./helpers.js\";\nimport { stringTypes } from \"../tokeniser.js\";\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n * @param {string} typeName\n */\nfunction generic_type(tokeniser, typeName) {\n  const base = tokeniser.consume(\"FrozenArray\", \"Promise\", \"sequence\", \"record\");\n  if (!base) {\n    return;\n  }\n  const ret = new Type({ source: tokeniser.source, tokens: { base } });\n  ret.tokens.open = tokeniser.consume(\"<\") || tokeniser.error(`No opening bracket after ${base.type}`);\n  switch (base.type) {\n    case \"Promise\": {\n      if (tokeniser.probe(\"[\")) tokeniser.error(\"Promise type cannot have extended attribute\");\n      const subtype = return_type(tokeniser, typeName) || tokeniser.error(\"Missing Promise subtype\");\n      ret.subtype.push(subtype);\n      break;\n    }\n    case \"sequence\":\n    case \"FrozenArray\": {\n      const subtype = type_with_extended_attributes(tokeniser, typeName) || tokeniser.error(`Missing ${base.type} subtype`);\n      ret.subtype.push(subtype);\n      break;\n    }\n    case \"record\": {\n      if (tokeniser.probe(\"[\")) tokeniser.error(\"Record key cannot have extended attribute\");\n      const keyType = tokeniser.consume(...stringTypes) || tokeniser.error(`Record key must be one of: ${stringTypes.join(\", \")}`);\n      const keyIdlType = new Type({ source: tokeniser.source, tokens: { base: keyType }});\n      keyIdlType.tokens.separator = tokeniser.consume(\",\") || tokeniser.error(\"Missing comma after record key type\");\n      keyIdlType.type = typeName;\n      const valueType = type_with_extended_attributes(tokeniser, typeName) || tokeniser.error(\"Error parsing generic type record\");\n      ret.subtype.push(keyIdlType, valueType);\n      break;\n    }\n  }\n  if (!ret.idlType) tokeniser.error(`Error parsing generic type ${base.type}`);\n  ret.tokens.close = tokeniser.consume(\">\") || tokeniser.error(`Missing closing bracket after ${base.type}`);\n  return ret;\n}\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n */\nfunction type_suffix(tokeniser, obj) {\n  const nullable = tokeniser.consume(\"?\");\n  if (nullable) {\n    obj.tokens.nullable = nullable;\n  }\n  if (tokeniser.probe(\"?\")) tokeniser.error(\"Can't nullable more than once\");\n}\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n * @param {string} typeName\n */\nfunction single_type(tokeniser, typeName) {\n  let ret = generic_type(tokeniser, typeName) || primitive_type(tokeniser);\n  if (!ret) {\n    const base = tokeniser.consume(\"identifier\", ...stringTypes);\n    if (!base) {\n      return;\n    }\n    ret = new Type({ source: tokeniser.source, tokens: { base } });\n    if (tokeniser.probe(\"<\")) tokeniser.error(`Unsupported generic type ${base.value}`);\n  }\n  if (ret.generic === \"Promise\" && tokeniser.probe(\"?\")) {\n    tokeniser.error(\"Promise type cannot be nullable\");\n  }\n  ret.type = typeName || null;\n  type_suffix(tokeniser, ret);\n  if (ret.nullable && ret.idlType === \"any\") tokeniser.error(\"Type `any` cannot be made nullable\");\n  return ret;\n}\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n * @param {string} type\n */\nfunction union_type(tokeniser, type) {\n  const tokens = {};\n  tokens.open = tokeniser.consume(\"(\");\n  if (!tokens.open) return;\n  const ret = new Type({ source: tokeniser.source, tokens });\n  ret.type = type || null;\n  while (true) {\n    const typ = type_with_extended_attributes(tokeniser) || tokeniser.error(\"No type after open parenthesis or 'or' in union type\");\n    if (typ.idlType === \"any\") tokeniser.error(\"Type `any` cannot be included in a union type\");\n    ret.subtype.push(typ);\n    const or = tokeniser.consume(\"or\");\n    if (or) {\n      typ.tokens.separator = or;\n    }\n    else break;\n  }\n  if (ret.idlType.length < 2) {\n    tokeniser.error(\"At least two types are expected in a union type but found less\");\n  }\n  tokens.close = tokeniser.consume(\")\") || tokeniser.error(\"Unterminated union type\");\n  type_suffix(tokeniser, ret);\n  return ret;\n}\n\nexport class Type extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   * @param {string} typeName\n   */\n  static parse(tokeniser, typeName) {\n    return single_type(tokeniser, typeName) || union_type(tokeniser, typeName);\n  }\n\n  constructor({ source, tokens }) {\n    super({ source, tokens });\n    Object.defineProperty(this, \"subtype\", { value: [] });\n    this.extAttrs = [];\n  }\n\n  get generic() {\n    if (this.subtype.length && this.tokens.base) {\n      return this.tokens.base.value;\n    }\n    return \"\";\n  }\n  get nullable() {\n    return Boolean(this.tokens.nullable);\n  }\n  get union() {\n    return Boolean(this.subtype.length) && !this.tokens.base;\n  }\n  get idlType() {\n    if (this.subtype.length) {\n      return this.subtype;\n    }\n    // Adding prefixes/postfixes for \"unrestricted float\", etc.\n    const name = [\n      this.tokens.prefix,\n      this.tokens.base,\n      this.tokens.postfix\n    ].filter(t => t).map(t => t.value).join(\" \");\n    return unescape(name);\n  }\n}\n","import { Base } from \"./base.js\";\nimport { const_data, const_value } from \"./helpers.js\";\n\nexport class Default extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const assign = tokeniser.consume(\"=\");\n    if (!assign) {\n      return null;\n    }\n    const def = const_value(tokeniser) || tokeniser.consume(\"string\", \"null\", \"[\", \"{\") || tokeniser.error(\"No value for default\");\n    const expression = [def];\n    if (def.type === \"[\") {\n      const close = tokeniser.consume(\"]\") || tokeniser.error(\"Default sequence value must be empty\");\n      expression.push(close);\n    } else if (def.type === \"{\") {\n      const close = tokeniser.consume(\"}\") || tokeniser.error(\"Default dictionary value must be empty\");\n      expression.push(close);\n    }\n    return new Default({ source: tokeniser.source, tokens: { assign }, expression });\n  }\n\n  constructor({ source, tokens, expression }) {\n    super({ source, tokens });\n    Object.defineProperty(this, \"expression\", { value: expression });\n  }\n\n  get type() {\n    return const_data(this.expression[0]).type;\n  }\n  get value() {\n    return const_data(this.expression[0]).value;\n  }\n  get negative() {\n    return const_data(this.expression[0]).negative;\n  }\n}\n","export class ArrayBase extends Array {\n  constructor({ source, tokens }) {\n    super();\n    Object.defineProperties(this, {\n      source: { value: source },\n      tokens: { value: tokens }\n    });\n  }\n}\n","import { Base } from \"./base.js\";\nimport { ArrayBase } from \"./array-base.js\";\nimport { list, identifiers, argument_list } from \"./helpers.js\";\n\nclass ExtendedAttributeParameters extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const tokens = { assign: tokeniser.consume(\"=\") };\n    const ret = new ExtendedAttributeParameters({ source: tokeniser.source, tokens });\n    if (tokens.assign) {\n      tokens.secondaryName = tokeniser.consume(\"identifier\", \"decimal\", \"integer\", \"string\");\n    }\n    tokens.open = tokeniser.consume(\"(\");\n    if (tokens.open) {\n      ret.list = ret.rhsType === \"identifier-list\" ?\n        // [Exposed=(Window,Worker)]\n        identifiers(tokeniser) :\n        // [NamedConstructor=Audio(DOMString src)] or [Constructor(DOMString str)]\n        argument_list(tokeniser);\n      tokens.close = tokeniser.consume(\")\") || tokeniser.error(\"Unexpected token in extended attribute argument list\");\n    } else if (ret.hasRhs && !tokens.secondaryName) {\n      tokeniser.error(\"No right hand side to extended attribute assignment\");\n    }\n    return ret;\n  }\n\n  get rhsType() {\n    return !this.tokens.assign ? null :\n      !this.tokens.secondaryName ? \"identifier-list\" :\n        this.tokens.secondaryName.type;\n  }\n}\n\nclass SimpleExtendedAttribute extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const name = tokeniser.consume(\"identifier\");\n    if (name) {\n      return new SimpleExtendedAttribute({\n        tokens: { name },\n        params: ExtendedAttributeParameters.parse(tokeniser)\n      });\n    }\n  }\n\n  constructor({ source, tokens, params }) {\n    super({ source, tokens });\n    Object.defineProperty(this, \"params\", { value: params });\n  }\n\n  get type() {\n    return \"extended-attribute\";\n  }\n  get name() {\n    return this.tokens.name.value;\n  }\n  get rhs() {\n    const { rhsType: type, tokens, list } = this.params;\n    if (!type) {\n      return null;\n    }\n    const value = type === \"identifier-list\" ? list : tokens.secondaryName.value;\n    return { type, value };\n  }\n  get arguments() {\n    const { rhsType, list } = this.params;\n    if (!list || rhsType === \"identifier-list\") {\n      return [];\n    }\n    return list;\n  }\n}\n\n// Note: we parse something simpler than the official syntax. It's all that ever\n// seems to be used\nexport class ExtendedAttributes extends ArrayBase {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const tokens = {};\n    tokens.open = tokeniser.consume(\"[\");\n    if (!tokens.open) return [];\n    const ret = new ExtendedAttributes({ source: tokeniser.source, tokens });\n    ret.push(...list(tokeniser, {\n      parser: SimpleExtendedAttribute.parse,\n      listName: \"extended attribute\"\n    }));\n    tokens.close = tokeniser.consume(\"]\") || tokeniser.error(\"Unexpected closing token of extended attribute\");\n    if (!ret.length) {\n      tokeniser.error(\"Found an empty extended attribute\");\n    }\n    if (tokeniser.probe(\"[\")) {\n      tokeniser.error(\"Illegal double extended attribute lists, consider merging them\");\n    }\n    return ret;\n  }\n}\n","import { Type } from \"./type.js\";\nimport { Argument } from \"./argument.js\";\nimport { Token } from \"./token.js\";\nimport { ExtendedAttributes } from \"./extended-attributes.js\";\nimport { Operation } from \"./operation.js\";\nimport { Attribute } from \"./attribute.js\";\n\n/**\n * @param {string} identifier\n */\nexport function unescape(identifier) {\n  return identifier.startsWith('_') ? identifier.slice(1) : identifier;\n}\n\n/**\n * Parses comma-separated list\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n * @param {object} args\n * @param {Function} args.parser parser function for each item\n * @param {boolean} [args.allowDangler] whether to allow dangling comma\n * @param {string} [args.listName] the name to be shown on error messages\n */\nexport function list(tokeniser, { parser, allowDangler, listName = \"list\" }) {\n  const first = parser(tokeniser);\n  if (!first) {\n    return [];\n  }\n  first.tokens.separator = tokeniser.consume(\",\");\n  const items = [first];\n  while (first.tokens.separator) {\n    const item = parser(tokeniser);\n    if (!item) {\n      if (!allowDangler) {\n        tokeniser.error(`Trailing comma in ${listName}`);\n      }\n      break;\n    }\n    item.tokens.separator = tokeniser.consume(\",\");\n    items.push(item);\n    if (!item.tokens.separator) break;\n  }\n  return items;\n}\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n */\nexport function const_value(tokeniser) {\n  return tokeniser.consume(\"true\", \"false\", \"Infinity\", \"-Infinity\", \"NaN\", \"decimal\", \"integer\");\n}\n\n/**\n * @param {object} token\n * @param {string} token.type\n * @param {string} token.value\n */\nexport function const_data({ type, value }) {\n  switch (type) {\n    case \"true\":\n    case \"false\":\n      return { type: \"boolean\", value: type === \"true\" };\n    case \"Infinity\":\n    case \"-Infinity\":\n      return { type: \"Infinity\", negative: type.startsWith(\"-\") };\n    case \"[\":\n      return { type: \"sequence\", value: [] };\n    case \"{\":\n      return { type: \"dictionary\" };\n    case \"decimal\":\n    case \"integer\":\n      return { type: \"number\", value };\n    case \"string\":\n      return { type: \"string\", value: value.slice(1, -1) };\n    default:\n      return { type };\n  }\n}\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n */\nexport function primitive_type(tokeniser) {\n  function integer_type() {\n    const prefix = tokeniser.consume(\"unsigned\");\n    const base = tokeniser.consume(\"short\", \"long\");\n    if (base) {\n      const postfix = tokeniser.consume(\"long\");\n      return new Type({ source, tokens: { prefix, base, postfix } });\n    }\n    if (prefix) tokeniser.error(\"Failed to parse integer type\");\n  }\n\n  function decimal_type() {\n    const prefix = tokeniser.consume(\"unrestricted\");\n    const base = tokeniser.consume(\"float\", \"double\");\n    if (base) {\n      return new Type({ source, tokens: { prefix, base } });\n    }\n    if (prefix) tokeniser.error(\"Failed to parse float type\");\n  }\n\n  const { source } = tokeniser;\n  const num_type = integer_type(tokeniser) || decimal_type(tokeniser);\n  if (num_type) return num_type;\n  const base = tokeniser.consume(\"boolean\", \"byte\", \"octet\");\n  if (base) {\n    return new Type({ source, tokens: { base } });\n  }\n}\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n */\nexport function identifiers(tokeniser) {\n  const ids = list(tokeniser, { parser: Token.parser(tokeniser, \"identifier\"), listName: \"identifier list\" });\n  if (!ids.length) {\n    tokeniser.error(\"Expected identifiers but none found\");\n  }\n  return ids;\n}\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n */\nexport function argument_list(tokeniser) {\n  return list(tokeniser, { parser: Argument.parse, listName: \"arguments list\" });\n}\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n * @param {string} typeName\n */\nexport function type_with_extended_attributes(tokeniser, typeName) {\n  const extAttrs = ExtendedAttributes.parse(tokeniser);\n  const ret = Type.parse(tokeniser, typeName);\n  if (ret) ret.extAttrs = extAttrs;\n  return ret;\n}\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n * @param {string} typeName\n */\nexport function return_type(tokeniser, typeName) {\n  const typ = Type.parse(tokeniser, typeName || \"return-type\");\n  if (typ) {\n    return typ;\n  }\n  const voidToken = tokeniser.consume(\"void\");\n  if (voidToken) {\n    const ret = new Type({ source: tokeniser.source, tokens: { base: voidToken } });\n    ret.type = \"return-type\";\n    return ret;\n  }\n}\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n */\nexport function stringifier(tokeniser) {\n  const special = tokeniser.consume(\"stringifier\");\n  if (!special) return;\n  const member = Attribute.parse(tokeniser, { special }) ||\n    Operation.parse(tokeniser, { special }) ||\n    tokeniser.error(\"Unterminated stringifier\");\n  return member;\n}\n","import { Base } from \"./base.js\";\nimport { Default } from \"./default.js\";\nimport { ExtendedAttributes } from \"./extended-attributes.js\";\nimport { unescape, type_with_extended_attributes } from \"./helpers.js\";\nimport { argumentNameKeywords } from \"../tokeniser.js\";\nimport { validationError } from \"../error.js\";\nimport { idlTypeIncludesDictionary } from \"../validators/helpers.js\";\n\nexport class Argument extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const start_position = tokeniser.position;\n    const tokens = {};\n    const ret = new Argument({ source: tokeniser.source, tokens });\n    ret.extAttrs = ExtendedAttributes.parse(tokeniser);\n    tokens.optional = tokeniser.consume(\"optional\");\n    ret.idlType = type_with_extended_attributes(tokeniser, \"argument-type\");\n    if (!ret.idlType) {\n      return tokeniser.unconsume(start_position);\n    }\n    if (!tokens.optional) {\n      tokens.variadic = tokeniser.consume(\"...\");\n    }\n    tokens.name = tokeniser.consume(\"identifier\", ...argumentNameKeywords);\n    if (!tokens.name) {\n      return tokeniser.unconsume(start_position);\n    }\n    ret.default = tokens.optional ? Default.parse(tokeniser) : null;\n    return ret;\n  }\n\n  get type() {\n    return \"argument\";\n  }\n  get optional() {\n    return !!this.tokens.optional;\n  }\n  get variadic() {\n    return !!this.tokens.variadic;\n  }\n  get name() {\n    return unescape(this.tokens.name.value);\n  }\n\n  *validate(defs) {\n    if (idlTypeIncludesDictionary(this.idlType, defs)) {\n      if (this.optional && !this.default) {\n        const message = `Optional dictionary arguments must have a default value of \\`{}\\`.`;\n        yield validationError(this.source, this.tokens.name, this, message);\n      }\n      if (this.idlType.nullable) {\n        const message = `Dictionary arguments cannot be nullable.`;\n        yield validationError(this.source, this.tokens.name, this, message);\n      }\n    }\n  }\n}\n","export function idlTypeIncludesDictionary(idlType, defs) {\n  if (!idlType.union) {\n    const def = defs.unique.get(idlType.idlType);\n    if (!def) {\n      return false;\n    }\n    if (def.type === \"typedef\") {\n      return idlTypeIncludesDictionary(def.idlType, defs);\n    }\n    return def.type === \"dictionary\";\n  }\n  for (const subtype of idlType.subtype) {\n    if (idlTypeIncludesDictionary(subtype, defs)) {\n      return true;\n    }\n  }\n  return false;\n}\n","import { Base } from \"./base.js\";\n\nexport class Token extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   * @param {string} type\n   */\n  static parser(tokeniser, type) {\n    return () => {\n      const value = tokeniser.consume(type);\n      if (value) {\n        return new Token({ source: tokeniser.source, tokens: { value } });\n      }\n    };\n  }\n\n  get value() {\n    return this.tokens.value.value;\n  }\n}\n","import { Base } from \"./base.js\";\nimport { return_type, argument_list, unescape } from \"./helpers.js\";\n\nexport class Operation extends Base {\n  /**\n   * @param {import(\"../tokeniser.js\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser, { special, regular } = {}) {\n    const tokens = { special };\n    const ret = new Operation({ source: tokeniser.source, tokens });\n    if (special && special.value === \"stringifier\") {\n      tokens.termination = tokeniser.consume(\";\");\n      if (tokens.termination) {\n        ret.arguments = [];\n        return ret;\n      }\n    }\n    if (!special && !regular) {\n      tokens.special = tokeniser.consume(\"getter\", \"setter\", \"deleter\");\n    }\n    ret.idlType = return_type(tokeniser) || tokeniser.error(\"Missing return type\");\n    tokens.name = tokeniser.consume(\"identifier\");\n    tokens.open = tokeniser.consume(\"(\") || tokeniser.error(\"Invalid operation\");\n    ret.arguments = argument_list(tokeniser);\n    tokens.close = tokeniser.consume(\")\") || tokeniser.error(\"Unterminated operation\");\n    tokens.termination = tokeniser.consume(\";\") || tokeniser.error(\"Unterminated operation, expected `;`\");\n    return ret;\n  }\n\n  get type() {\n    return \"operation\";\n  }\n  get name() {\n    const { name } = this.tokens;\n    if (!name) {\n      return \"\";\n    }\n    return unescape(name.value);\n  }\n  get special() {\n    if (!this.tokens.special) {\n      return \"\";\n    }\n    return this.tokens.special.value;\n  }\n\n  *validate(defs) {\n    for (const argument of this.arguments) {\n      yield* argument.validate(defs);\n    }\n  }\n}\n","import { Base } from \"./base.js\";\nimport { type_with_extended_attributes, unescape } from \"./helpers.js\";\n\nexport class Attribute extends Base {\n  /**\n   * @param {import(\"../tokeniser.js\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser, { special, noInherit = false, readonly = false } = {}) {\n    const start_position = tokeniser.position;\n    const tokens = { special };\n    const ret = new Attribute({ source: tokeniser.source, tokens });\n    if (!special && !noInherit) {\n      tokens.special = tokeniser.consume(\"inherit\");\n    }\n    if (ret.special === \"inherit\" && tokeniser.probe(\"readonly\")) {\n      tokeniser.error(\"Inherited attributes cannot be read-only\");\n    }\n    tokens.readonly = tokeniser.consume(\"readonly\");\n    if (readonly && !tokens.readonly && tokeniser.probe(\"attribute\")) {\n      tokeniser.error(\"Attributes must be readonly in this context\");\n    }\n    tokens.base = tokeniser.consume(\"attribute\");\n    if (!tokens.base) {\n      tokeniser.unconsume(start_position);\n      return;\n    }\n    ret.idlType = type_with_extended_attributes(tokeniser, \"attribute-type\") || tokeniser.error(\"Attribute lacks a type\");\n    switch (ret.idlType.generic) {\n      case \"sequence\":\n      case \"record\": tokeniser.error(`Attributes cannot accept ${ret.idlType.generic} types`);\n    }\n    tokens.name = tokeniser.consume(\"identifier\", \"required\") || tokeniser.error(\"Attribute lacks a name\");\n    tokens.termination = tokeniser.consume(\";\") || tokeniser.error(\"Unterminated attribute, expected `;`\");\n    return ret;\n  }\n\n  get type() {\n    return \"attribute\";\n  }\n  get special() {\n    if (!this.tokens.special) {\n      return \"\";\n    }\n    return this.tokens.special.value;\n  }\n  get readonly() {\n    return !!this.tokens.readonly;\n  }\n  get name() {\n    return unescape(this.tokens.name.value);\n  }\n}\n","import { list, unescape } from \"./helpers.js\";\nimport { Token } from \"./token.js\";\nimport { Base } from \"./base.js\";\n\nclass EnumValue extends Token {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const value = tokeniser.consume(\"string\");\n    if (value) {\n      return new EnumValue({ source: tokeniser.source, tokens: { value } });\n    }\n  }\n\n  get type() {\n    return \"enum-value\";\n  }\n  get value() {\n    return super.value.slice(1, -1);\n  }\n}\n\nexport class Enum extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const tokens = {};\n    tokens.base = tokeniser.consume(\"enum\");\n    if (!tokens.base) {\n      return;\n    }\n    tokens.name = tokeniser.consume(\"identifier\") || tokeniser.error(\"No name for enum\");\n    const ret = tokeniser.current = new Enum({ source: tokeniser.source, tokens });\n    tokens.open = tokeniser.consume(\"{\") || tokeniser.error(\"Bodyless enum\");\n    ret.values = list(tokeniser, {\n      parser: EnumValue.parse,\n      allowDangler: true,\n      listName: \"enumeration\"\n    });\n    if (tokeniser.probe(\"string\")) {\n      tokeniser.error(\"No comma between enum values\");\n    }\n    tokens.close = tokeniser.consume(\"}\") || tokeniser.error(\"Unexpected value in enum\");\n    if (!ret.values.length) {\n      tokeniser.error(\"No value in enum\");\n    }\n    tokens.termination = tokeniser.consume(\";\") || tokeniser.error(\"No semicolon after enum\");\n    return ret;\n  }\n\n  get type() {\n    return \"enum\";\n  }\n  get name() {\n    return unescape(this.tokens.name.value);\n  }\n}\n","import { Base } from \"./base.js\";\nimport { unescape } from \"./helpers.js\";\n\nexport class Includes extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const target = tokeniser.consume(\"identifier\");\n    if (!target) {\n      return;\n    }\n    const tokens = { target };\n    tokens.includes = tokeniser.consume(\"includes\");\n    if (!tokens.includes) {\n      tokeniser.unconsume(target.index);\n      return;\n    }\n    tokens.mixin = tokeniser.consume(\"identifier\") || tokeniser.error(\"Incomplete includes statement\");\n    tokens.termination = tokeniser.consume(\";\") || tokeniser.error(\"No terminating ; for includes statement\");\n    return new Includes({ source: tokeniser.source, tokens });\n  }\n\n  get type() {\n    return \"includes\";\n  }\n  get target() {\n    return unescape(this.tokens.target.value);\n  }\n  get includes() {\n    return unescape(this.tokens.mixin.value);\n  }\n}\n","import { Base } from \"./base\";\nimport { type_with_extended_attributes, unescape } from \"./helpers\";\n\nexport class Typedef extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const tokens = {};\n    const ret = new Typedef({ source: tokeniser.source, tokens });\n    tokens.base = tokeniser.consume(\"typedef\");\n    if (!tokens.base) {\n      return;\n    }\n    ret.idlType = type_with_extended_attributes(tokeniser, \"typedef-type\") || tokeniser.error(\"Typedef lacks a type\");\n    tokens.name = tokeniser.consume(\"identifier\") || tokeniser.error(\"Typedef lacks a name\");\n    tokeniser.current = ret;\n    tokens.termination = tokeniser.consume(\";\") || tokeniser.error(\"Unterminated typedef, expected `;`\");\n    return ret;\n  }\n\n  get type() {\n    return \"typedef\";\n  }\n  get name() {\n    return unescape(this.tokens.name.value);\n  }\n}\n","import { Base } from \"./base\";\nimport { return_type, argument_list, unescape } from \"./helpers\";\n\nexport class CallbackFunction extends Base {\n  /**\n   * @param {import(\"../tokeniser.js\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser, base) {\n    const tokens = { base };\n    const ret = new CallbackFunction({ source: tokeniser.source, tokens });\n    tokens.name = tokeniser.consume(\"identifier\") || tokeniser.error(\"Callback lacks a name\");\n    tokeniser.current = ret;\n    tokens.assign = tokeniser.consume(\"=\") || tokeniser.error(\"Callback lacks an assignment\");\n    ret.idlType = return_type(tokeniser) || tokeniser.error(\"Callback lacks a return type\");\n    tokens.open = tokeniser.consume(\"(\") || tokeniser.error(\"Callback lacks parentheses for arguments\");\n    ret.arguments = argument_list(tokeniser);\n    tokens.close = tokeniser.consume(\")\") || tokeniser.error(\"Unterminated callback\");\n    tokens.termination = tokeniser.consume(\";\") || tokeniser.error(\"Unterminated callback, expected `;`\");\n    return ret;\n  }\n\n  get type() {\n    return \"callback\";\n  }\n  get name() {\n    return unescape(this.tokens.name.value);\n  }\n}\n","import { Base } from \"./base.js\";\nimport { ExtendedAttributes } from \"./extended-attributes.js\";\nimport { unescape } from \"./helpers.js\";\n\n/**\n * @param {import(\"../tokeniser.js\").Tokeniser} tokeniser\n */\nfunction inheritance(tokeniser) {\n  const colon = tokeniser.consume(\":\");\n  if (!colon) {\n    return {};\n  }\n  const inheritance = tokeniser.consume(\"identifier\") || tokeniser.error(\"Inheritance lacks a type\");\n  return { colon, inheritance };\n}\n\nexport class Container extends Base {\n    /**\n     * @param {import(\"../tokeniser.js\").Tokeniser} tokeniser\n     * @param {*} instance\n     * @param {*} args\n     */\n    static parse(tokeniser, instance, { type, inheritable, allowedMembers }) {\n      const { tokens } = instance;\n      tokens.name = tokeniser.consume(\"identifier\") || tokeniser.error(`Missing name in ${instance.type}`);\n      tokeniser.current = instance;\n      if (inheritable) {\n        Object.assign(tokens, inheritance(tokeniser));\n      }\n      tokens.open = tokeniser.consume(\"{\") || tokeniser.error(`Bodyless ${type}`);\n      instance.members = [];\n      while (true) {\n        tokens.close = tokeniser.consume(\"}\");\n        if (tokens.close) {\n          tokens.termination = tokeniser.consume(\";\") || tokeniser.error(`Missing semicolon after ${type}`);\n          return instance;\n        }\n        const ea = ExtendedAttributes.parse(tokeniser);\n        let mem;\n        for (const [parser, ...args] of allowedMembers) {\n          mem = parser(tokeniser, ...args);\n          if (mem) {\n            break;\n          }\n        }\n        if (!mem) {\n          tokeniser.error(\"Unknown member\");\n        }\n        mem.extAttrs = ea;\n        instance.members.push(mem);\n      }\n    }\n\n    get partial() {\n      return !!this.tokens.partial;\n    }\n    get name() {\n      return unescape(this.tokens.name.value);\n    }\n    get inheritance() {\n      if (!this.tokens.inheritance) {\n        return null;\n      }\n      return unescape(this.tokens.inheritance.value);\n    }\n\n    *validate(defs) {\n      for (const member of this.members) {\n        if (member.validate) {\n          yield* member.validate(defs);\n        }\n      }\n    }\n  }\n","import { Base } from \"./base.js\";\nimport { Type } from \"./type.js\";\nimport { const_data, const_value, primitive_type } from \"./helpers.js\";\n\nexport class Constant extends Base {\n  /**\n   * @param {import(\"../tokeniser.js\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const tokens = {};\n    tokens.base = tokeniser.consume(\"const\");\n    if (!tokens.base) {\n      return;\n    }\n    let idlType = primitive_type(tokeniser);\n    if (!idlType) {\n      const base = tokeniser.consume(\"identifier\") || tokeniser.error(\"Const lacks a type\");\n      idlType = new Type({ source: tokeniser.source, tokens: { base } });\n    }\n    if (tokeniser.probe(\"?\")) {\n      tokeniser.error(\"Unexpected nullable constant type\");\n    }\n    idlType.type = \"const-type\";\n    tokens.name = tokeniser.consume(\"identifier\") || tokeniser.error(\"Const lacks a name\");\n    tokens.assign = tokeniser.consume(\"=\") || tokeniser.error(\"Const lacks value assignment\");\n    tokens.value = const_value(tokeniser) || tokeniser.error(\"Const lacks a value\");\n    tokens.termination = tokeniser.consume(\";\") || tokeniser.error(\"Unterminated const, expected `;`\");\n    const ret = new Constant({ source: tokeniser.source, tokens });\n    ret.idlType = idlType;\n    return ret;\n  }\n\n  get type() {\n    return \"const\";\n  }\n  get name() {\n    return unescape(this.tokens.name.value);\n  }\n  get value() {\n    return const_data(this.tokens.value);\n  }\n}\n","import { Base } from \"./base\";\nimport { type_with_extended_attributes } from \"./helpers\";\n\nexport class IterableLike extends Base {\n  /**\n   * @param {import(\"../tokeniser.js\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const start_position = tokeniser.position;\n    const tokens = {};\n    const ret = new IterableLike({ source: tokeniser.source, tokens });\n    tokens.readonly = tokeniser.consume(\"readonly\");\n    tokens.base = tokens.readonly ?\n      tokeniser.consume(\"maplike\", \"setlike\") :\n      tokeniser.consume(\"iterable\", \"maplike\", \"setlike\");\n    if (!tokens.base) {\n      tokeniser.unconsume(start_position);\n      return;\n    }\n\n    const { type } = ret;\n    const secondTypeRequired = type === \"maplike\";\n    const secondTypeAllowed = secondTypeRequired || type === \"iterable\";\n\n    tokens.open = tokeniser.consume(\"<\") || tokeniser.error(`Missing less-than sign \\`<\\` in ${type} declaration`);\n    const first = type_with_extended_attributes(tokeniser) || tokeniser.error(`Missing a type argument in ${type} declaration`);\n    ret.idlType = [first];\n    if (secondTypeAllowed) {\n      first.tokens.separator = tokeniser.consume(\",\");\n      if (first.tokens.separator) {\n        ret.idlType.push(type_with_extended_attributes(tokeniser));\n      }\n      else if (secondTypeRequired)\n      tokeniser.error(`Missing second type argument in ${type} declaration`);\n    }\n    tokens.close = tokeniser.consume(\">\") || tokeniser.error(`Missing greater-than sign \\`>\\` in ${type} declaration`);\n    tokens.termination = tokeniser.consume(\";\") || tokeniser.error(`Missing semicolon after ${type} declaration`);\n\n    return ret;\n  }\n\n  get type() {\n    return this.tokens.base.value;\n  }\n  get readonly() {\n    return !!this.tokens.readonly;\n  }\n}\n","import { Container } from \"./container.js\";\nimport { Attribute } from \"./attribute.js\";\nimport { Operation } from \"./operation.js\";\nimport { Constant } from \"./constant.js\";\nimport { IterableLike } from \"./iterable.js\";\nimport { stringifier } from \"./helpers.js\";\nimport { validationError } from \"../error.js\";\nimport { checkInterfaceMemberDuplication } from \"../validators/interface.js\";\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n */\nfunction static_member(tokeniser) {\n  const special = tokeniser.consume(\"static\");\n  if (!special) return;\n  const member = Attribute.parse(tokeniser, { special }) ||\n    Operation.parse(tokeniser, { special }) ||\n    tokeniser.error(\"No body in static member\");\n  return member;\n}\n\nexport class Interface extends Container {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser, base, { partial = null } = {}) {\n    const tokens = { partial, base };\n    return Container.parse(tokeniser, new Interface({ source: tokeniser.source, tokens }), {\n      type: \"interface\",\n      inheritable: !partial,\n      allowedMembers: [\n        [Constant.parse],\n        [static_member],\n        [stringifier],\n        [IterableLike.parse],\n        [Attribute.parse],\n        [Operation.parse]\n      ]\n    });\n  }\n\n  get type() {\n    return \"interface\";\n  }\n\n  *validate(defs) {\n    if (!this.partial && this.extAttrs.every(extAttr => extAttr.name !== \"Exposed\")) {\n      const message = `Interfaces must have \\`[Exposed]\\` extended attribute. \\\nTo fix, add, for example, \\`[Exposed=Window]\\`. Please also consider carefully \\\nif your interface should also be exposed in a Worker scope. Refer to the \\\n[WebIDL spec section on Exposed](https://heycam.github.io/webidl/#Exposed) \\\nfor more information.`;\n      yield validationError(this.source, this.tokens.name, this, message);\n    }\n    yield* super.validate(defs);\n    if (!this.partial) {\n      yield* checkInterfaceMemberDuplication(defs, this);\n    }\n  }\n}\n","import { validationError } from \"../error.js\";\n\nexport function* checkInterfaceMemberDuplication(defs, i) {\n  const opNames = new Set(getOperations(i).map(op => op.name));\n  const partials = defs.partials.get(i.name) || [];\n  const mixins = defs.mixinMap.get(i.name) || [];\n  for (const ext of [...partials, ...mixins]) {\n    const additions = getOperations(ext);\n    yield* forEachExtension(additions, opNames, ext, i);\n    for (const addition of additions) {\n      opNames.add(addition.name);\n    }\n  }\n\n  function* forEachExtension(additions, existings, ext, base) {\n    for (const addition of additions) {\n      const { name } = addition;\n      if (name && existings.has(name)) {\n        const message = `The operation \"${name}\" has already been defined for the base interface \"${base.name}\" either in itself or in a mixin`;\n        yield validationError(ext.source, addition.tokens.name, ext, message);\n      }\n    }\n  }\n\n  function getOperations(i) {\n    return i.members\n      .filter(({type}) => type === \"operation\");\n  }\n}\n","import { Container } from \"./container.js\";\nimport { Constant } from \"./constant.js\";\nimport { Attribute } from \"./attribute.js\";\nimport { Operation } from \"./operation.js\";\nimport { stringifier } from \"./helpers.js\";\n\nexport class Mixin extends Container {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser, base, { partial } = {}) {\n    const tokens = { partial, base };\n    tokens.mixin = tokeniser.consume(\"mixin\");\n    if (!tokens.mixin) {\n      return;\n    }\n    return Container.parse(tokeniser, new Mixin({ source: tokeniser.source, tokens }), {\n      type: \"interface mixin\",\n      allowedMembers: [\n        [Constant.parse],\n        [stringifier],\n        [Attribute.parse, { noInherit: true }],\n        [Operation.parse, { regular: true }]\n      ]\n    });\n  }\n\n  get type() {\n    return \"interface mixin\";\n  }\n}\n","import { Base } from \"./base.js\";\nimport { unescape, type_with_extended_attributes } from \"./helpers.js\";\nimport { ExtendedAttributes } from \"./extended-attributes.js\";\nimport { Default } from \"./default.js\";\n\nexport class Field extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const tokens = {};\n    const ret = new Field({ source: tokeniser.source, tokens });\n    ret.extAttrs = ExtendedAttributes.parse(tokeniser);\n    tokens.required = tokeniser.consume(\"required\");\n    ret.idlType = type_with_extended_attributes(tokeniser, \"dictionary-type\") || tokeniser.error(\"Dictionary member lacks a type\");\n    tokens.name = tokeniser.consume(\"identifier\") || tokeniser.error(\"Dictionary member lacks a name\");\n    ret.default = Default.parse(tokeniser);\n    if (tokens.required && ret.default) tokeniser.error(\"Required member must not have a default\");\n    tokens.termination = tokeniser.consume(\";\") || tokeniser.error(\"Unterminated dictionary member, expected `;`\");\n    return ret;\n  }\n\n  get type() {\n    return \"field\";\n  }\n  get name() {\n    return unescape(this.tokens.name.value);\n  }\n  get required() {\n    return !!this.tokens.required;\n  }\n}\n","import { Container } from \"./container.js\";\nimport { Field } from \"./field.js\";\n\nexport class Dictionary extends Container {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser, { partial } = {}) {\n    const tokens = { partial };\n    tokens.base = tokeniser.consume(\"dictionary\");\n    if (!tokens.base) {\n      return;\n    }\n    return Container.parse(tokeniser, new Dictionary({ source: tokeniser.source, tokens }), {\n      type: \"dictionary\",\n      inheritable: !partial,\n      allowedMembers: [\n        [Field.parse],\n      ]\n    });\n  }\n\n  get type() {\n    return \"dictionary\";\n  }\n}\n","import { Container } from \"./container.js\";\nimport { Attribute } from \"./attribute.js\";\nimport { Operation } from \"./operation.js\";\nimport { validationError } from \"../error.js\";\n\nexport class Namespace extends Container {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser, { partial } = {}) {\n    const tokens = { partial };\n    tokens.base = tokeniser.consume(\"namespace\");\n    if (!tokens.base) {\n      return;\n    }\n    return Container.parse(tokeniser, new Namespace({ source: tokeniser.source, tokens }), {\n      type: \"namespace\",\n      allowedMembers: [\n        [Attribute.parse, { noInherit: true, readonly: true }],\n        [Operation.parse, { regular: true }]\n      ]\n    });\n  }\n\n  get type() {\n    return \"namespace\";\n  }\n\n  *validate(defs) {\n    if (!this.partial && this.extAttrs.every(extAttr => extAttr.name !== \"Exposed\")) {\n      const message = `Namespaces must have [Exposed] extended attribute. \\\nTo fix, add, for example, [Exposed=Window]. Please also consider carefully \\\nif your namespace should also be exposed in a Worker scope. Refer to the \\\n[WebIDL spec section on Exposed](https://heycam.github.io/webidl/#Exposed) \\\nfor more information.`;\n      yield validationError(this.source, this.tokens.name, this, message);\n    }\n    yield* super.validate(defs);\n  }\n}\n","import { Container } from \"./container.js\";\nimport { Operation } from \"./operation.js\";\nimport { Constant } from \"./constant.js\";\n\n\nexport class CallbackInterface extends Container {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser, callback, { partial = null } = {}) {\n    const tokens = { callback };\n    tokens.base = tokeniser.consume(\"interface\");\n    if (!tokens.base) {\n      return;\n    }\n    return Container.parse(tokeniser, new CallbackInterface({ source: tokeniser.source, tokens }), {\n      type: \"callback interface\",\n      inheritable: !partial,\n      allowedMembers: [\n        [Constant.parse],\n        [Operation.parse, { regular: true }]\n      ]\n    });\n  }\n\n  get type() {\n    return \"callback interface\";\n  }\n}\n","\"use strict\";\n\nimport { Tokeniser } from \"./tokeniser.js\";\nimport { Enum } from \"./productions/enum.js\";\nimport { Includes } from \"./productions/includes.js\";\nimport { ExtendedAttributes } from \"./productions/extended-attributes.js\";\nimport { Typedef } from \"./productions/typedef.js\";\nimport { CallbackFunction } from \"./productions/callback.js\";\nimport { Interface } from \"./productions/interface.js\";\nimport { Mixin } from \"./productions/mixin.js\";\nimport { Dictionary } from \"./productions/dictionary.js\";\nimport { Namespace } from \"./productions/namespace.js\";\nimport { CallbackInterface } from \"./productions/callback-interface.js\";\n\n/**\n * @param {Tokeniser} tokeniser\n * @param {object} options\n * @param {boolean} [options.concrete]\n */\nfunction parseByTokens(tokeniser, options) {\n  const source = tokeniser.source;\n\n  function error(str) {\n    tokeniser.error(str);\n  }\n\n  function consume(...candidates) {\n    return tokeniser.consume(...candidates);\n  }\n\n  function callback() {\n    const callback = consume(\"callback\");\n    if (!callback) return;\n    if (tokeniser.probe(\"interface\")) {\n      return CallbackInterface.parse(tokeniser, callback);\n    }\n    return CallbackFunction.parse(tokeniser, callback);\n  }\n\n  function interface_(opts) {\n    const base = consume(\"interface\");\n    if (!base) return;\n    const ret = Mixin.parse(tokeniser, base, opts) ||\n      Interface.parse(tokeniser, base, opts) ||\n      error(\"Interface has no proper body\");\n    return ret;\n  }\n\n  function partial() {\n    const partial = consume(\"partial\");\n    if (!partial) return;\n    return Dictionary.parse(tokeniser, { partial }) ||\n      interface_({ partial }) ||\n      Namespace.parse(tokeniser, { partial }) ||\n      error(\"Partial doesn't apply to anything\");\n  }\n\n  function definition() {\n    return callback() ||\n      interface_() ||\n      partial() ||\n      Dictionary.parse(tokeniser) ||\n      Enum.parse(tokeniser) ||\n      Typedef.parse(tokeniser) ||\n      Includes.parse(tokeniser) ||\n      Namespace.parse(tokeniser);\n  }\n\n  function definitions() {\n    if (!source.length) return [];\n    const defs = [];\n    while (true) {\n      const ea = ExtendedAttributes.parse(tokeniser);\n      const def = definition();\n      if (!def) {\n        if (ea.length) error(\"Stray extended attributes\");\n        break;\n      }\n      def.extAttrs = ea;\n      defs.push(def);\n    }\n    const eof = consume(\"eof\");\n    if (options.concrete) {\n      defs.push(eof);\n    }\n    return defs;\n  }\n  const res = definitions();\n  if (tokeniser.position < source.length) error(\"Unrecognised tokens\");\n  return res;\n}\n\nexport function parse(str, options = {}) {\n  const tokeniser = new Tokeniser(str);\n  if (typeof options.sourceName !== \"undefined\") {\n    tokeniser.source.name = options.sourceName;\n  }\n  return parseByTokens(tokeniser, options);\n}\n","\"use strict\";\n\nfunction noop(arg) {\n  return arg;\n}\n\nconst templates = {\n  wrap: items => items.join(\"\"),\n  trivia: noop,\n  name: noop,\n  reference: noop,\n  type: noop,\n  generic: noop,\n  inheritance: noop,\n  definition: noop,\n  extendedAttribute: noop,\n  extendedAttributeReference: noop\n};\n\nexport function write(ast, { templates: ts = templates } = {}) {\n  ts = Object.assign({}, templates, ts);\n\n  function reference(raw, { unescaped, context }) {\n    if (!unescaped) {\n      unescaped = raw.startsWith(\"_\") ? raw.slice(1) : raw;\n    }\n    return ts.reference(raw, unescaped, context);\n  }\n\n  function token(t, wrapper = noop, ...args) {\n    if (!t) {\n      return \"\";\n    }\n    const value = wrapper(t.value, ...args);\n    return ts.wrap([ts.trivia(t.trivia), value]);\n  }\n\n  function reference_token(t, context) {\n    return token(t, reference, { context });\n  }\n\n  function name_token(t, arg) {\n    return token(t, ts.name, arg);\n  }\n\n  function type_body(it) {\n    if (it.union || it.generic) {\n      return ts.wrap([\n        token(it.tokens.base, ts.generic),\n        token(it.tokens.open),\n        ...it.subtype.map(type),\n        token(it.tokens.close)\n      ]);\n    }\n    const firstToken = it.tokens.prefix || it.tokens.base;\n    const prefix = it.tokens.prefix ? [\n      it.tokens.prefix.value,\n      ts.trivia(it.tokens.base.trivia)\n    ] : [];\n    const ref = reference(ts.wrap([\n      ...prefix,\n      it.tokens.base.value,\n      token(it.tokens.postfix)\n    ]), { unescaped: it.idlType, context: it });\n    return ts.wrap([ts.trivia(firstToken.trivia), ref]);\n  }\n  function type(it) {\n    return ts.wrap([\n      extended_attributes(it.extAttrs),\n      type_body(it),\n      token(it.tokens.nullable),\n      token(it.tokens.separator)\n    ]);\n  }\n  function default_(def) {\n    if (!def) {\n      return \"\";\n    }\n    return ts.wrap([\n      token(def.tokens.assign),\n      ...def.expression.map(t => token(t))\n    ]);\n  }\n  function argument(arg) {\n    return ts.wrap([\n      extended_attributes(arg.extAttrs),\n      token(arg.tokens.optional),\n      ts.type(type(arg.idlType)),\n      token(arg.tokens.variadic),\n      name_token(arg.tokens.name, { data: arg }),\n      default_(arg.default),\n      token(arg.tokens.separator)\n    ]);\n  }\n  function identifier(id, context) {\n    return ts.wrap([\n      reference_token(id.tokens.value, context),\n      token(id.tokens.separator)\n    ]);\n  }\n  function make_ext_at(it) {\n    const { rhsType } = it.params;\n    return ts.wrap([\n      ts.trivia(it.tokens.name.trivia),\n      ts.extendedAttribute(ts.wrap([\n        ts.extendedAttributeReference(it.name),\n        token(it.params.tokens.assign),\n        reference_token(it.params.tokens.secondaryName, it),\n        token(it.params.tokens.open),\n        ...!it.params.list ? [] :\n          it.params.list.map(\n            rhsType === \"identifier-list\" ? id => identifier(id, it) : argument\n          ),\n        token(it.params.tokens.close)\n      ])),\n      token(it.tokens.separator)\n    ]);\n  }\n  function extended_attributes(eats) {\n    if (!eats.length) return \"\";\n    return ts.wrap([\n      token(eats.tokens.open),\n      ...eats.map(make_ext_at),\n      token(eats.tokens.close)\n    ]);\n  }\n\n  function operation(it, parent) {\n    const body = it.idlType ? [\n      ts.type(type(it.idlType)),\n      name_token(it.tokens.name, { data: it, parent }),\n      token(it.tokens.open),\n      ts.wrap(it.arguments.map(argument)),\n      token(it.tokens.close),\n    ] : [];\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      token(it.tokens.special),\n      ...body,\n      token(it.tokens.termination)\n    ]), { data: it, parent });\n  }\n\n  function attribute(it, parent) {\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      token(it.tokens.special),\n      token(it.tokens.readonly),\n      token(it.tokens.base),\n      ts.type(type(it.idlType)),\n      name_token(it.tokens.name, { data: it, parent }),\n      token(it.tokens.termination)\n    ]), { data: it, parent });\n  }\n\n  function inheritance(inh) {\n    if (!inh.tokens.inheritance) {\n      return \"\";\n    }\n    return ts.wrap([\n      token(inh.tokens.colon),\n      ts.trivia(inh.tokens.inheritance.trivia),\n      ts.inheritance(reference(inh.tokens.inheritance.value, { context: inh }))\n    ]);\n  }\n\n  function container(it) {\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      token(it.tokens.callback),\n      token(it.tokens.partial),\n      token(it.tokens.base),\n      token(it.tokens.mixin),\n      name_token(it.tokens.name, { data: it }),\n      inheritance(it),\n      token(it.tokens.open),\n      iterate(it.members, it),\n      token(it.tokens.close),\n      token(it.tokens.termination)\n    ]), { data: it });\n  }\n\n  function field(it, parent) {\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      token(it.tokens.required),\n      ts.type(type(it.idlType)),\n      name_token(it.tokens.name, { data: it, parent }),\n      default_(it.default),\n      token(it.tokens.termination)\n    ]), { data: it, parent });\n  }\n  function const_(it, parent) {\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      token(it.tokens.base),\n      ts.type(type(it.idlType)),\n      name_token(it.tokens.name, { data: it, parent }),\n      token(it.tokens.assign),\n      token(it.tokens.value),\n      token(it.tokens.termination)\n    ]), { data: it, parent });\n  }\n  function typedef(it) {\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      token(it.tokens.base),\n      ts.type(type(it.idlType)),\n      name_token(it.tokens.name, { data: it }),\n      token(it.tokens.termination)\n    ]), { data: it });\n  }\n  function includes(it) {\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      reference_token(it.tokens.target, it),\n      token(it.tokens.includes),\n      reference_token(it.tokens.mixin, it),\n      token(it.tokens.termination)\n    ]), { data: it });\n  }\n  function callback(it) {\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      token(it.tokens.base),\n      name_token(it.tokens.name, { data: it }),\n      token(it.tokens.assign),\n      ts.type(type(it.idlType)),\n      token(it.tokens.open),\n      ...it.arguments.map(argument),\n      token(it.tokens.close),\n      token(it.tokens.termination),\n    ]), { data: it });\n  }\n  function enum_(it) {\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      token(it.tokens.base),\n      name_token(it.tokens.name, { data: it }),\n      token(it.tokens.open),\n      iterate(it.values, it),\n      token(it.tokens.close),\n      token(it.tokens.termination)\n    ]), { data: it });\n  }\n  function enum_value(v, parent) {\n    return ts.wrap([\n      ts.trivia(v.tokens.value.trivia),\n      ts.definition(\n        ts.wrap(['\"', ts.name(v.value, { data: v, parent }), '\"']),\n        { data: v, parent }\n      ),\n      token(v.tokens.separator)\n    ]);\n  }\n  function iterable_like(it, parent) {\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      token(it.tokens.readonly),\n      token(it.tokens.base, ts.generic),\n      token(it.tokens.open),\n      ts.wrap(it.idlType.map(type)),\n      token(it.tokens.close),\n      token(it.tokens.termination)\n    ]), { data: it, parent });\n  }\n  function eof(it) {\n    return ts.trivia(it.trivia);\n  }\n\n  const table = {\n    interface: container,\n    \"interface mixin\": container,\n    namespace: container,\n    operation,\n    attribute,\n    dictionary: container,\n    field,\n    const: const_,\n    typedef,\n    includes,\n    callback,\n    enum: enum_,\n    \"enum-value\": enum_value,\n    iterable: iterable_like,\n    legacyiterable: iterable_like,\n    maplike: iterable_like,\n    setlike: iterable_like,\n    \"callback interface\": container,\n    eof\n  };\n  function dispatch(it, parent) {\n    const dispatcher = table[it.type];\n    if (!dispatcher) {\n      throw new Error(`Type \"${it.type}\" is unsupported`);\n    }\n    return table[it.type](it, parent);\n  }\n  function iterate(things, parent) {\n    if (!things) return;\n    const results = things.map(thing => dispatch(thing, parent));\n    return ts.wrap(results);\n  }\n  return iterate(ast);\n}\n","\"use strict\";\n\nimport { validationError as error } from \"./error.js\";\n\nfunction getMixinMap(all, unique) {\n  const map = new Map();\n  const includes = all.filter(def => def.type === \"includes\");\n  for (const include of includes) {\n    const mixin = unique.get(include.includes);\n    if (!mixin) {\n      continue;\n    }\n    const array = map.get(include.target);\n    if (array) {\n      array.push(mixin);\n    } else {\n      map.set(include.target, [mixin]);\n    }\n  }\n  return map;\n}\n\nfunction groupDefinitions(all) {\n  const unique = new Map();\n  const duplicates = new Set();\n  const partials = new Map();\n  for (const def of all) {\n    if (def.partial) {\n      const array = partials.get(def.name);\n      if (array) {\n        array.push(def);\n      } else {\n        partials.set(def.name, [def]);\n      }\n      continue;\n    }\n    if (!def.name) {\n      continue;\n    }\n    if (!unique.has(def.name)) {\n      unique.set(def.name, def);\n    } else {\n      duplicates.add(def);\n    }\n  }\n  return {\n    all,\n    unique,\n    partials,\n    duplicates,\n    mixinMap: getMixinMap(all, unique)\n  };\n}\n\nfunction* checkDuplicatedNames({ unique, duplicates }) {\n  for (const dup of duplicates) {\n    const { name } = dup;\n    const message = `The name \"${name}\" of type \"${unique.get(name).type}\" was already seen`;\n    yield error(dup.source, dup.tokens.name, dup, message);\n  }\n}\n\nfunction* validateIterable(ast) {\n  const defs = groupDefinitions(ast);\n  for (const def of defs.all) {\n    if (def.validate) {\n      yield* def.validate(defs);\n    }\n  }\n  yield* checkDuplicatedNames(defs);\n}\n\n// Remove this once all of our support targets expose `.flat()` by default\nfunction flatten(array) {\n  if (array.flat) {\n    return array.flat();\n  }\n  return [].concat(...array);\n}\n\n/**\n * @param {*} ast AST or array of ASTs\n */\nexport function validate(ast) {\n  return [...validateIterable(flatten(ast))];\n}\n","export { parse } from \"./lib/webidl2.js\";\nexport { write } from \"./lib/writer.js\";\nexport { validate } from \"./lib/validator.js\";\n"],"sourceRoot":""}