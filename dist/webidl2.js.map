{"version":3,"sources":["webpack://WebIDL2/webpack/universalModuleDefinition","webpack://WebIDL2/webpack/bootstrap","webpack://WebIDL2/./lib/error.js","webpack://WebIDL2/./lib/tokeniser.js","webpack://WebIDL2/./lib/productions/base.js","webpack://WebIDL2/./lib/validators/helpers.js","webpack://WebIDL2/./lib/productions/type.js","webpack://WebIDL2/./lib/productions/default.js","webpack://WebIDL2/./lib/productions/array-base.js","webpack://WebIDL2/./lib/productions/extended-attributes.js","webpack://WebIDL2/./lib/productions/helpers.js","webpack://WebIDL2/./lib/productions/argument.js","webpack://WebIDL2/./lib/productions/token.js","webpack://WebIDL2/./lib/productions/operation.js","webpack://WebIDL2/./lib/productions/attribute.js","webpack://WebIDL2/./lib/productions/enum.js","webpack://WebIDL2/./lib/productions/includes.js","webpack://WebIDL2/./lib/productions/typedef.js","webpack://WebIDL2/./lib/productions/callback.js","webpack://WebIDL2/./lib/productions/container.js","webpack://WebIDL2/./lib/productions/constant.js","webpack://WebIDL2/./lib/productions/iterable.js","webpack://WebIDL2/./lib/productions/interface.js","webpack://WebIDL2/./lib/validators/interface.js","webpack://WebIDL2/./lib/productions/mixin.js","webpack://WebIDL2/./lib/productions/field.js","webpack://WebIDL2/./lib/productions/dictionary.js","webpack://WebIDL2/./lib/productions/namespace.js","webpack://WebIDL2/./lib/productions/callback-interface.js","webpack://WebIDL2/./lib/webidl2.js","webpack://WebIDL2/./lib/writer.js","webpack://WebIDL2/./lib/validator.js","webpack://WebIDL2/./index.js"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","error_error","source","position","current","message","kind","level","autofix","sliceTokens","count","slice","Math","max","tokensToText","inputs","precedes","text","map","trivia","join","nextToken","type","length","line","precedingLastLine","splitted","split","lastLine","subsequentTokens","subsequentText","sourceContext","repeat","contextType","context","partial","bareMessage","sourceName","input","tokens","validationError","token","options","index","tokenRe","decimal","integer","identifier","string","whitespace","comment","other","stringTypes","argumentNameKeywords","nonRegexTerminals","concat","punctuations","tokeniser_Tokeniser","[object Object]","idl","str","lastCharIndex","nextChar","charAt","result","test","attemptTokenMatch","noFlushTrivia","currentTrivia","pop","match","includes","punctuation","startsWith","push","Error","re","lastIndex","exec","tokenise","WebIDLParseError","syntaxError","candidates","probe","super","Base","defineProperties","json","undefined","inheritance","proto","descMap","getOwnPropertyDescriptors","entries","getPrototypeOf","idlTypeIncludesDictionary","idlType","defs","union","def","unique","typedefIncludesDictionary","cache","has","set","subtype","type_suffix","tokeniser","obj","nullable","consume","error","single_type","typeName","ret","base","type_Type","open","return_type","type_with_extended_attributes","keyType","keyIdlType","separator","valueType","close","generic_type","primitive_type","generic","typ","or","union_type","extAttrs","Boolean","helpers_unescape","prefix","postfix","filter","typedef","target","reference","targetToken","validate","default_Default","assign","const_value","expression","const_data","negative","ArrayBase","Array","extended_attributes_ExtendedAttributeParameters","secondaryName","list","rhsType","ids","parser","token_Token","listName","identifiers","argument_list","hasRhs","extended_attributes_SimpleExtendedAttribute","params","parse","rhs","arguments","arg","extended_attributes_ExtendedAttributes","extAttr","argument_Argument","start_position","optional","variadic","default","unconsume","operation_Operation","special","regular","termination","argument","attribute_Attribute","noInherit","readonly","allowDangler","first","items","item","num_type","integer_type","decimal_type","voidToken","stringifier","autofixAddExposedWindow","exposed","existing","unshift","enum_EnumValue","enum_Enum","values","includes_Includes","mixin","typedef_Typedef","callback_CallbackFunction","container_Container","instance","inheritable","allowedMembers","colon","members","ea","mem","args","member","constant_Constant","unescape","iterable_IterableLike","async","secondTypeRequired","secondTypeAllowed","static_member","interface_Interface","every","opNames","Set","getOperations","op","partials","mixins","mixinMap","ext","additions","forEachExtension","addition","add","existings","checkInterfaceMemberDuplication","mixin_Mixin","field_Field","required","dictionary_Dictionary","namespace_Namespace","callback_interface_CallbackInterface","callback","parseByTokens","interface_","opts","definition","res","eof","concrete","definitions","noop","templates","wrap","extendedAttribute","extendedAttributeReference","write","ast","ts","raw","unescaped","wrapper","reference_token","name_token","type_body","it","firstToken","ref","extended_attributes","default_","data","make_ext_at","id","eats","container","inh","iterate","iterable_like","parent","table","interface","interface mixin","namespace","operation","body","attribute","dictionary","field","const","enum","enum-value","v","iterable","legacyiterable","maplike","setlike","callback interface","things","results","thing","dispatch","getMixinMap","all","Map","include","array","validateIterable","duplicates","WeakMap","groupDefinitions","dup","checkDuplicatedNames","flat","__webpack_exports__"],"mappings":"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","file":"webidl2.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WebIDL2\"] = factory();\n\telse\n\t\troot[\"WebIDL2\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * @param {string} text\n */\nfunction lastLine(text) {\n  const splitted = text.split(\"\\n\");\n  return splitted[splitted.length - 1];\n}\n\n/**\n * @typedef {object} WebIDL2ErrorOptions\n * @property {\"error\" | \"warning\"} level\n * @property {Function} autofix\n *\n * @param {string} message error message\n * @param {\"Syntax\" | \"Validation\"} kind error type\n * @param {WebIDL2ErrorOptions} [options]\n */\nfunction error(source, position, current, message, kind, { level = \"error\", autofix } = {}) {\n  /**\n   * @param {number} count\n   */\n  function sliceTokens(count) {\n    return count > 0 ?\n      source.slice(position, position + count) :\n      source.slice(Math.max(position + count, 0), position);\n  }\n\n  function tokensToText(inputs, { precedes } = {}) {\n    const text = inputs.map(t => t.trivia + t.value).join(\"\");\n    const nextToken = source[position];\n    if (nextToken.type === \"eof\") {\n      return text;\n    }\n    if (precedes) {\n      return text + nextToken.trivia;\n    }\n    return text.slice(nextToken.trivia.length);\n  }\n\n  const maxTokens = 5; // arbitrary but works well enough\n  const line =\n    source[position].type !== \"eof\" ? source[position].line :\n    source.length > 1 ? source[position - 1].line :\n    1;\n\n  const precedingLastLine = lastLine(\n    tokensToText(sliceTokens(-maxTokens), { precedes: true })\n  );\n\n  const subsequentTokens = sliceTokens(maxTokens);\n  const subsequentText = tokensToText(subsequentTokens);\n  const subsequentFirstLine = subsequentText.split(\"\\n\")[0];\n\n  const spaced = \" \".repeat(precedingLastLine.length) + \"^\";\n  const sourceContext = precedingLastLine + subsequentFirstLine + \"\\n\" + spaced;\n\n  const contextType = kind === \"Syntax\" ? \"since\" : \"inside\";\n  const inSourceName = source.name ? ` in ${source.name}` : \"\";\n  const grammaticalContext = (current && current.name) ? `, ${contextType} \\`${current.partial ? \"partial \" : \"\"}${current.type} ${current.name}\\`` : \"\";\n  const context = `${kind} error at line ${line}${inSourceName}${grammaticalContext}:\\n${sourceContext}`;\n  return {\n    message: `${context} ${message}`,\n    bareMessage: message,\n    context,\n    line,\n    sourceName: source.name,\n    level,\n    autofix,\n    input: subsequentText,\n    tokens: subsequentTokens\n  };\n}\n\n/**\n * @param {string} message error message\n */\nexport function syntaxError(source, position, current, message) {\n  return error(source, position, current, message, \"Syntax\");\n}\n\n/**\n * @param {string} message error message\n * @param {WebIDL2ErrorOptions} [options]\n */\nexport function validationError(source, token, current, message, options) {\n  return error(source, token.index, current, message, \"Validation\", options);\n}\n","import { syntaxError } from \"./error.js\";\n\n// These regular expressions use the sticky flag so they will only match at\n// the current location (ie. the offset of lastIndex).\nconst tokenRe = {\n  // This expression uses a lookahead assertion to catch false matches\n  // against integers early.\n  \"decimal\": /-?(?=[0-9]*\\.|[0-9]+[eE])(([0-9]+\\.[0-9]*|[0-9]*\\.[0-9]+)([Ee][-+]?[0-9]+)?|[0-9]+[Ee][-+]?[0-9]+)/y,\n  \"integer\": /-?(0([Xx][0-9A-Fa-f]+|[0-7]*)|[1-9][0-9]*)/y,\n  \"identifier\": /[_-]?[A-Za-z][0-9A-Z_a-z-]*/y,\n  \"string\": /\"[^\"]*\"/y,\n  \"whitespace\": /[\\t\\n\\r ]+/y,\n  \"comment\": /((\\/(\\/.*|\\*([^*]|\\*[^/])*\\*\\/)[\\t\\n\\r ]*)+)/y,\n  \"other\": /[^\\t\\n\\r 0-9A-Za-z]/y\n};\n\nexport const stringTypes = [\n  \"ByteString\",\n  \"DOMString\",\n  \"USVString\"\n];\n\nexport const argumentNameKeywords = [\n  \"async\",\n  \"attribute\",\n  \"callback\",\n  \"const\",\n  \"deleter\",\n  \"dictionary\",\n  \"enum\",\n  \"getter\",\n  \"includes\",\n  \"inherit\",\n  \"interface\",\n  \"iterable\",\n  \"maplike\",\n  \"namespace\",\n  \"partial\",\n  \"required\",\n  \"setlike\",\n  \"setter\",\n  \"static\",\n  \"stringifier\",\n  \"typedef\",\n  \"unrestricted\"\n];\n\nconst nonRegexTerminals = [\n  \"-Infinity\",\n  \"FrozenArray\",\n  \"Infinity\",\n  \"NaN\",\n  \"Promise\",\n  \"async\",\n  \"boolean\",\n  \"byte\",\n  \"double\",\n  \"false\",\n  \"float\",\n  \"long\",\n  \"mixin\",\n  \"null\",\n  \"octet\",\n  \"optional\",\n  \"or\",\n  \"readonly\",\n  \"record\",\n  \"sequence\",\n  \"short\",\n  \"true\",\n  \"unsigned\",\n  \"void\"\n].concat(argumentNameKeywords, stringTypes);\n\nconst punctuations = [\n  \"(\",\n  \")\",\n  \",\",\n  \"...\",\n  \":\",\n  \";\",\n  \"<\",\n  \"=\",\n  \">\",\n  \"?\",\n  \"[\",\n  \"]\",\n  \"{\",\n  \"}\"\n];\n\n/**\n * @param {string} str\n */\nfunction tokenise(str) {\n  const tokens = [];\n  let lastCharIndex = 0;\n  let trivia = \"\";\n  let line = 1;\n  let index = 0;\n  while (lastCharIndex < str.length) {\n    const nextChar = str.charAt(lastCharIndex);\n    let result = -1;\n\n    if (/[\\t\\n\\r ]/.test(nextChar)) {\n      result = attemptTokenMatch(\"whitespace\", { noFlushTrivia: true });\n    } else if (nextChar === '/') {\n      result = attemptTokenMatch(\"comment\", { noFlushTrivia: true });\n    }\n\n    if (result !== -1) {\n      const currentTrivia = tokens.pop().value;\n      line += (currentTrivia.match(/\\n/g) || []).length;\n      trivia += currentTrivia;\n      index -= 1;\n    } else if (/[-0-9.A-Z_a-z]/.test(nextChar)) {\n      result = attemptTokenMatch(\"decimal\");\n      if (result === -1) {\n        result = attemptTokenMatch(\"integer\");\n      }\n      if (result === -1) {\n        result = attemptTokenMatch(\"identifier\");\n        const token = tokens[tokens.length - 1];\n        if (result !== -1 && nonRegexTerminals.includes(token.value)) {\n          token.type = token.value;\n        }\n      }\n    } else if (nextChar === '\"') {\n      result = attemptTokenMatch(\"string\");\n    }\n\n    for (const punctuation of punctuations) {\n      if (str.startsWith(punctuation, lastCharIndex)) {\n        tokens.push({ type: punctuation, value: punctuation, trivia, line, index });\n        trivia = \"\";\n        lastCharIndex += punctuation.length;\n        result = lastCharIndex;\n        break;\n      }\n    }\n\n    // other as the last try\n    if (result === -1) {\n      result = attemptTokenMatch(\"other\");\n    }\n    if (result === -1) {\n      throw new Error(\"Token stream not progressing\");\n    }\n    lastCharIndex = result;\n    index += 1;\n  }\n\n  // remaining trivia as eof\n  tokens.push({\n    type: \"eof\",\n    value: \"\",\n    trivia\n  });\n\n  return tokens;\n\n  /**\n   * @param {keyof tokenRe} type\n   * @param {object} [options]\n   * @param {boolean} [options.noFlushTrivia]\n   */\n  function attemptTokenMatch(type, { noFlushTrivia } = {}) {\n    const re = tokenRe[type];\n    re.lastIndex = lastCharIndex;\n    const result = re.exec(str);\n    if (result) {\n      tokens.push({ type, value: result[0], trivia, line, index });\n      if (!noFlushTrivia) {\n        trivia = \"\";\n      }\n      return re.lastIndex;\n    }\n    return -1;\n  }\n}\n\nexport class Tokeniser {\n  /**\n   * @param {string} idl\n   */\n  constructor(idl) {\n    this.source = tokenise(idl);\n    this.position = 0;\n  }\n\n  /**\n   * @param {string} message\n   */\n  error(message) {\n    throw new WebIDLParseError(syntaxError(this.source, this.position, this.current, message));\n  }\n\n  /**\n   * @param {string} type\n   */\n  probe(type) {\n    return this.source.length > this.position && this.source[this.position].type === type;\n  }\n\n  /**\n   * @param  {...string} candidates\n   */\n  consume(...candidates) {\n    for (const type of candidates) {\n      if (!this.probe(type)) continue;\n      const token = this.source[this.position];\n      this.position++;\n      return token;\n    }\n  }\n\n  /**\n   * @param {number} position\n   */\n  unconsume(position) {\n    this.position = position;\n  }\n}\n\nclass WebIDLParseError extends Error {\n  constructor({ message, bareMessage, context, line, sourceName, input, tokens }) {\n    super(message);\n\n    this.name = \"WebIDLParseError\"; // not to be mangled\n    this.bareMessage = bareMessage;\n    this.context = context;\n    this.line = line;\n    this.sourceName = sourceName;\n    this.input = input;\n    this.tokens = tokens;\n  }\n}\n","export class Base {\n  constructor({ source, tokens }) {\n    Object.defineProperties(this, {\n      source: { value: source },\n      tokens: { value: tokens }\n    });\n  }\n\n  toJSON() {\n    const json = { type: undefined, name: undefined, inheritance: undefined };\n    let proto = this;\n    while (proto !== Object.prototype) {\n      const descMap = Object.getOwnPropertyDescriptors(proto);\n      for (const [key, value] of Object.entries(descMap)) {\n        if (value.enumerable || value.get) {\n          json[key] = this[key];\n        }\n      }\n      proto = Object.getPrototypeOf(proto);\n    }\n    return json;\n  }\n}\n","/**\n * Yields direct references to dictionary within union.\n */\nexport function* dictionaryWithinUnion(subtypes, defs) {\n  for (const subtype of subtypes) {\n    const def = defs.unique.get(subtype.idlType);\n    if (def && def.type === \"dictionary\") {\n      yield subtype;\n    }\n  }\n}\n\n/**\n * @return the type reference that ultimately includes dictionary.\n */\nexport function idlTypeIncludesDictionary(idlType, defs) {\n  if (!idlType.union) {\n    const def = defs.unique.get(idlType.idlType);\n    if (!def) {\n      return;\n    }\n    if (def.type === \"typedef\") {\n      const { typedefIncludesDictionary} = defs.cache;\n      if (typedefIncludesDictionary.has(def)) {\n        // Note that this also halts when it met indeterminate state\n        // to prevent infinite recursion\n        return typedefIncludesDictionary.get(def);\n      }\n      defs.cache.typedefIncludesDictionary.set(def, undefined); // indeterminate state\n      const result = idlTypeIncludesDictionary(def.idlType, defs);\n      defs.cache.typedefIncludesDictionary.set(def, result);\n      if (result) {\n        return idlType;\n      }\n    }\n    if (def.type === \"dictionary\") {\n      return idlType;\n    }\n  }\n  for (const subtype of idlType.subtype) {\n    const result = idlTypeIncludesDictionary(subtype, defs);\n    if (result) {\n      if (subtype.union) {\n        return result;\n      }\n      return subtype;\n    }\n  }\n}\n\n/**\n * @return true if the idlType directly references a typedef.\n */\nexport function referencesTypedef(idlType, defs) {\n  const result = defs.unique.get(idlType.idlType);\n  return result && result.type === \"typedef\";\n}\n","import { Base } from \"./base.js\";\nimport { unescape, type_with_extended_attributes, return_type, primitive_type } from \"./helpers.js\";\nimport { stringTypes } from \"../tokeniser.js\";\nimport { validationError } from \"../error.js\";\nimport { idlTypeIncludesDictionary } from \"../validators/helpers.js\";\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n * @param {string} typeName\n */\nfunction generic_type(tokeniser, typeName) {\n  const base = tokeniser.consume(\"FrozenArray\", \"Promise\", \"sequence\", \"record\");\n  if (!base) {\n    return;\n  }\n  const ret = new Type({ source: tokeniser.source, tokens: { base } });\n  ret.tokens.open = tokeniser.consume(\"<\") || tokeniser.error(`No opening bracket after ${base.type}`);\n  switch (base.type) {\n    case \"Promise\": {\n      if (tokeniser.probe(\"[\")) tokeniser.error(\"Promise type cannot have extended attribute\");\n      const subtype = return_type(tokeniser, typeName) || tokeniser.error(\"Missing Promise subtype\");\n      ret.subtype.push(subtype);\n      break;\n    }\n    case \"sequence\":\n    case \"FrozenArray\": {\n      const subtype = type_with_extended_attributes(tokeniser, typeName) || tokeniser.error(`Missing ${base.type} subtype`);\n      ret.subtype.push(subtype);\n      break;\n    }\n    case \"record\": {\n      if (tokeniser.probe(\"[\")) tokeniser.error(\"Record key cannot have extended attribute\");\n      const keyType = tokeniser.consume(...stringTypes) || tokeniser.error(`Record key must be one of: ${stringTypes.join(\", \")}`);\n      const keyIdlType = new Type({ source: tokeniser.source, tokens: { base: keyType }});\n      keyIdlType.tokens.separator = tokeniser.consume(\",\") || tokeniser.error(\"Missing comma after record key type\");\n      keyIdlType.type = typeName;\n      const valueType = type_with_extended_attributes(tokeniser, typeName) || tokeniser.error(\"Error parsing generic type record\");\n      ret.subtype.push(keyIdlType, valueType);\n      break;\n    }\n  }\n  if (!ret.idlType) tokeniser.error(`Error parsing generic type ${base.type}`);\n  ret.tokens.close = tokeniser.consume(\">\") || tokeniser.error(`Missing closing bracket after ${base.type}`);\n  return ret;\n}\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n */\nfunction type_suffix(tokeniser, obj) {\n  const nullable = tokeniser.consume(\"?\");\n  if (nullable) {\n    obj.tokens.nullable = nullable;\n  }\n  if (tokeniser.probe(\"?\")) tokeniser.error(\"Can't nullable more than once\");\n}\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n * @param {string} typeName\n */\nfunction single_type(tokeniser, typeName) {\n  let ret = generic_type(tokeniser, typeName) || primitive_type(tokeniser);\n  if (!ret) {\n    const base = tokeniser.consume(\"identifier\", ...stringTypes);\n    if (!base) {\n      return;\n    }\n    ret = new Type({ source: tokeniser.source, tokens: { base } });\n    if (tokeniser.probe(\"<\")) tokeniser.error(`Unsupported generic type ${base.value}`);\n  }\n  if (ret.generic === \"Promise\" && tokeniser.probe(\"?\")) {\n    tokeniser.error(\"Promise type cannot be nullable\");\n  }\n  ret.type = typeName || null;\n  type_suffix(tokeniser, ret);\n  if (ret.nullable && ret.idlType === \"any\") tokeniser.error(\"Type `any` cannot be made nullable\");\n  return ret;\n}\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n * @param {string} type\n */\nfunction union_type(tokeniser, type) {\n  const tokens = {};\n  tokens.open = tokeniser.consume(\"(\");\n  if (!tokens.open) return;\n  const ret = new Type({ source: tokeniser.source, tokens });\n  ret.type = type || null;\n  while (true) {\n    const typ = type_with_extended_attributes(tokeniser) || tokeniser.error(\"No type after open parenthesis or 'or' in union type\");\n    if (typ.idlType === \"any\") tokeniser.error(\"Type `any` cannot be included in a union type\");\n    ret.subtype.push(typ);\n    const or = tokeniser.consume(\"or\");\n    if (or) {\n      typ.tokens.separator = or;\n    }\n    else break;\n  }\n  if (ret.idlType.length < 2) {\n    tokeniser.error(\"At least two types are expected in a union type but found less\");\n  }\n  tokens.close = tokeniser.consume(\")\") || tokeniser.error(\"Unterminated union type\");\n  type_suffix(tokeniser, ret);\n  return ret;\n}\n\nexport class Type extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   * @param {string} typeName\n   */\n  static parse(tokeniser, typeName) {\n    return single_type(tokeniser, typeName) || union_type(tokeniser, typeName);\n  }\n\n  constructor({ source, tokens }) {\n    super({ source, tokens });\n    Object.defineProperty(this, \"subtype\", { value: [] });\n    this.extAttrs = [];\n  }\n\n  get generic() {\n    if (this.subtype.length && this.tokens.base) {\n      return this.tokens.base.value;\n    }\n    return \"\";\n  }\n  get nullable() {\n    return Boolean(this.tokens.nullable);\n  }\n  get union() {\n    return Boolean(this.subtype.length) && !this.tokens.base;\n  }\n  get idlType() {\n    if (this.subtype.length) {\n      return this.subtype;\n    }\n    // Adding prefixes/postfixes for \"unrestricted float\", etc.\n    const name = [\n      this.tokens.prefix,\n      this.tokens.base,\n      this.tokens.postfix\n    ].filter(t => t).map(t => t.value).join(\" \");\n    return unescape(name);\n  }\n\n  *validate(defs) {\n    /*\n     * If a union is nullable, its subunions cannot include a dictionary\n     * If not, subunions may include dictionaries if each union is not nullable\n     */\n    const typedef = !this.union && defs.unique.get(this.idlType);\n    const target =\n      this.union ? this :\n      (typedef && typedef.type === \"typedef\") ? typedef.idlType :\n      undefined;\n    if (target && this.nullable) {\n      // do not allow any dictionary\n      const reference = idlTypeIncludesDictionary(target, defs);\n      if (reference) {\n        const targetToken = (this.union ? reference : this).tokens.base;\n        const message = `Nullable union cannot include a dictionary type`;\n        yield validationError(this.source, targetToken, this, message);\n      }\n    } else {\n      // allow some dictionary\n      for (const subtype of this.subtype) {\n        yield* subtype.validate(defs);\n      }\n    }\n  }\n}\n","import { Base } from \"./base.js\";\nimport { const_data, const_value } from \"./helpers.js\";\n\nexport class Default extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const assign = tokeniser.consume(\"=\");\n    if (!assign) {\n      return null;\n    }\n    const def = const_value(tokeniser) || tokeniser.consume(\"string\", \"null\", \"[\", \"{\") || tokeniser.error(\"No value for default\");\n    const expression = [def];\n    if (def.type === \"[\") {\n      const close = tokeniser.consume(\"]\") || tokeniser.error(\"Default sequence value must be empty\");\n      expression.push(close);\n    } else if (def.type === \"{\") {\n      const close = tokeniser.consume(\"}\") || tokeniser.error(\"Default dictionary value must be empty\");\n      expression.push(close);\n    }\n    return new Default({ source: tokeniser.source, tokens: { assign }, expression });\n  }\n\n  constructor({ source, tokens, expression }) {\n    super({ source, tokens });\n    Object.defineProperty(this, \"expression\", { value: expression });\n  }\n\n  get type() {\n    return const_data(this.expression[0]).type;\n  }\n  get value() {\n    return const_data(this.expression[0]).value;\n  }\n  get negative() {\n    return const_data(this.expression[0]).negative;\n  }\n}\n","export class ArrayBase extends Array {\n  constructor({ source, tokens }) {\n    super();\n    Object.defineProperties(this, {\n      source: { value: source },\n      tokens: { value: tokens }\n    });\n  }\n}\n","import { Base } from \"./base.js\";\nimport { ArrayBase } from \"./array-base.js\";\nimport { list, identifiers, argument_list } from \"./helpers.js\";\nimport { validationError } from \"../error.js\";\n\nclass ExtendedAttributeParameters extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const tokens = { assign: tokeniser.consume(\"=\") };\n    const ret = new ExtendedAttributeParameters({ source: tokeniser.source, tokens });\n    if (tokens.assign) {\n      tokens.secondaryName = tokeniser.consume(\"identifier\", \"decimal\", \"integer\", \"string\");\n    }\n    tokens.open = tokeniser.consume(\"(\");\n    if (tokens.open) {\n      ret.list = ret.rhsType === \"identifier-list\" ?\n        // [Exposed=(Window,Worker)]\n        identifiers(tokeniser) :\n        // [NamedConstructor=Audio(DOMString src)] or [Constructor(DOMString str)]\n        argument_list(tokeniser);\n      tokens.close = tokeniser.consume(\")\") || tokeniser.error(\"Unexpected token in extended attribute argument list\");\n    } else if (ret.hasRhs && !tokens.secondaryName) {\n      tokeniser.error(\"No right hand side to extended attribute assignment\");\n    }\n    return ret;\n  }\n\n  get rhsType() {\n    return !this.tokens.assign ? null :\n      !this.tokens.secondaryName ? \"identifier-list\" :\n        this.tokens.secondaryName.type;\n  }\n}\n\nexport class SimpleExtendedAttribute extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const name = tokeniser.consume(\"identifier\");\n    if (name) {\n      return new SimpleExtendedAttribute({\n        source: tokeniser.source,\n        tokens: { name },\n        params: ExtendedAttributeParameters.parse(tokeniser)\n      });\n    }\n  }\n\n  constructor({ source, tokens, params }) {\n    super({ source, tokens });\n    Object.defineProperty(this, \"params\", { value: params });\n  }\n\n  get type() {\n    return \"extended-attribute\";\n  }\n  get name() {\n    return this.tokens.name.value;\n  }\n  get rhs() {\n    const { rhsType: type, tokens, list } = this.params;\n    if (!type) {\n      return null;\n    }\n    const value = type === \"identifier-list\" ? list : tokens.secondaryName.value;\n    return { type, value };\n  }\n  get arguments() {\n    const { rhsType, list } = this.params;\n    if (!list || rhsType === \"identifier-list\") {\n      return [];\n    }\n    return list;\n  }\n\n  *validate(defs) {\n    if (this.name === \"NoInterfaceObject\") {\n      const message = `\\`[NoInterfaceObject]\\` extended attribute is an \\\nundesirable feature that may be removed from Web IDL in the future. Refer to the \\\n[relevant upstream PR](https://github.com/heycam/webidl/pull/609) for more \\\ninformation.`;\n      yield validationError(this.source, this.tokens.name, this, message, { level: \"warning\" });\n    }\n    for (const arg of this.arguments) {\n      yield* arg.validate(defs);\n    }\n  }\n}\n\n// Note: we parse something simpler than the official syntax. It's all that ever\n// seems to be used\nexport class ExtendedAttributes extends ArrayBase {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const tokens = {};\n    tokens.open = tokeniser.consume(\"[\");\n    if (!tokens.open) return new ExtendedAttributes({});\n    const ret = new ExtendedAttributes({ source: tokeniser.source, tokens });\n    ret.push(...list(tokeniser, {\n      parser: SimpleExtendedAttribute.parse,\n      listName: \"extended attribute\"\n    }));\n    tokens.close = tokeniser.consume(\"]\") || tokeniser.error(\"Unexpected closing token of extended attribute\");\n    if (!ret.length) {\n      tokeniser.error(\"Found an empty extended attribute\");\n    }\n    if (tokeniser.probe(\"[\")) {\n      tokeniser.error(\"Illegal double extended attribute lists, consider merging them\");\n    }\n    return ret;\n  }\n\n  *validate(defs) {\n    for (const extAttr of this) {\n      yield* extAttr.validate(defs);\n    }\n  }\n}\n","import { Type } from \"./type.js\";\nimport { Argument } from \"./argument.js\";\nimport { Token } from \"./token.js\";\nimport { ExtendedAttributes, SimpleExtendedAttribute } from \"./extended-attributes.js\";\nimport { Operation } from \"./operation.js\";\nimport { Attribute } from \"./attribute.js\";\nimport { Tokeniser } from \"../tokeniser.js\";\n\n/**\n * @param {string} identifier\n */\nexport function unescape(identifier) {\n  return identifier.startsWith('_') ? identifier.slice(1) : identifier;\n}\n\n/**\n * Parses comma-separated list\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n * @param {object} args\n * @param {Function} args.parser parser function for each item\n * @param {boolean} [args.allowDangler] whether to allow dangling comma\n * @param {string} [args.listName] the name to be shown on error messages\n */\nexport function list(tokeniser, { parser, allowDangler, listName = \"list\" }) {\n  const first = parser(tokeniser);\n  if (!first) {\n    return [];\n  }\n  first.tokens.separator = tokeniser.consume(\",\");\n  const items = [first];\n  while (first.tokens.separator) {\n    const item = parser(tokeniser);\n    if (!item) {\n      if (!allowDangler) {\n        tokeniser.error(`Trailing comma in ${listName}`);\n      }\n      break;\n    }\n    item.tokens.separator = tokeniser.consume(\",\");\n    items.push(item);\n    if (!item.tokens.separator) break;\n  }\n  return items;\n}\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n */\nexport function const_value(tokeniser) {\n  return tokeniser.consume(\"true\", \"false\", \"Infinity\", \"-Infinity\", \"NaN\", \"decimal\", \"integer\");\n}\n\n/**\n * @param {object} token\n * @param {string} token.type\n * @param {string} token.value\n */\nexport function const_data({ type, value }) {\n  switch (type) {\n    case \"true\":\n    case \"false\":\n      return { type: \"boolean\", value: type === \"true\" };\n    case \"Infinity\":\n    case \"-Infinity\":\n      return { type: \"Infinity\", negative: type.startsWith(\"-\") };\n    case \"[\":\n      return { type: \"sequence\", value: [] };\n    case \"{\":\n      return { type: \"dictionary\" };\n    case \"decimal\":\n    case \"integer\":\n      return { type: \"number\", value };\n    case \"string\":\n      return { type: \"string\", value: value.slice(1, -1) };\n    default:\n      return { type };\n  }\n}\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n */\nexport function primitive_type(tokeniser) {\n  function integer_type() {\n    const prefix = tokeniser.consume(\"unsigned\");\n    const base = tokeniser.consume(\"short\", \"long\");\n    if (base) {\n      const postfix = tokeniser.consume(\"long\");\n      return new Type({ source, tokens: { prefix, base, postfix } });\n    }\n    if (prefix) tokeniser.error(\"Failed to parse integer type\");\n  }\n\n  function decimal_type() {\n    const prefix = tokeniser.consume(\"unrestricted\");\n    const base = tokeniser.consume(\"float\", \"double\");\n    if (base) {\n      return new Type({ source, tokens: { prefix, base } });\n    }\n    if (prefix) tokeniser.error(\"Failed to parse float type\");\n  }\n\n  const { source } = tokeniser;\n  const num_type = integer_type(tokeniser) || decimal_type(tokeniser);\n  if (num_type) return num_type;\n  const base = tokeniser.consume(\"boolean\", \"byte\", \"octet\");\n  if (base) {\n    return new Type({ source, tokens: { base } });\n  }\n}\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n */\nexport function identifiers(tokeniser) {\n  const ids = list(tokeniser, { parser: Token.parser(tokeniser, \"identifier\"), listName: \"identifier list\" });\n  if (!ids.length) {\n    tokeniser.error(\"Expected identifiers but none found\");\n  }\n  return ids;\n}\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n */\nexport function argument_list(tokeniser) {\n  return list(tokeniser, { parser: Argument.parse, listName: \"arguments list\" });\n}\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n * @param {string} typeName\n */\nexport function type_with_extended_attributes(tokeniser, typeName) {\n  const extAttrs = ExtendedAttributes.parse(tokeniser);\n  const ret = Type.parse(tokeniser, typeName);\n  if (ret) ret.extAttrs = extAttrs;\n  return ret;\n}\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n * @param {string} typeName\n */\nexport function return_type(tokeniser, typeName) {\n  const typ = Type.parse(tokeniser, typeName || \"return-type\");\n  if (typ) {\n    return typ;\n  }\n  const voidToken = tokeniser.consume(\"void\");\n  if (voidToken) {\n    const ret = new Type({ source: tokeniser.source, tokens: { base: voidToken } });\n    ret.type = \"return-type\";\n    return ret;\n  }\n}\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n */\nexport function stringifier(tokeniser) {\n  const special = tokeniser.consume(\"stringifier\");\n  if (!special) return;\n  const member = Attribute.parse(tokeniser, { special }) ||\n    Operation.parse(tokeniser, { special }) ||\n    tokeniser.error(\"Unterminated stringifier\");\n  return member;\n}\n\n/**\n * @param {object} def\n * @param {import(\"./extended-attributes.js\").ExtendedAttributes} def.extAttrs\n */\nexport function autofixAddExposedWindow(def) {\n  return () => {\n    if (def.extAttrs.length){\n      const tokeniser = new Tokeniser(\"Exposed=Window,\");\n      const exposed = SimpleExtendedAttribute.parse(tokeniser);\n      exposed.tokens.separator = tokeniser.consume(\",\");\n      const existing = def.extAttrs[0];\n      if (!/^\\s/.test(existing.tokens.name.trivia)) {\n        existing.tokens.name.trivia = ` ${existing.tokens.name.trivia}`;\n      }\n      def.extAttrs.unshift(exposed);\n    } else {\n      def.extAttrs = ExtendedAttributes.parse(new Tokeniser(\"[Exposed=Window]\"));\n      def.extAttrs.tokens.open.trivia = def.tokens.base.trivia;\n      def.tokens.base.trivia = \" \";\n    }\n  };\n}\n","import { Base } from \"./base.js\";\nimport { Default } from \"./default.js\";\nimport { ExtendedAttributes } from \"./extended-attributes.js\";\nimport { unescape, type_with_extended_attributes } from \"./helpers.js\";\nimport { argumentNameKeywords, Tokeniser } from \"../tokeniser.js\";\nimport { validationError } from \"../error.js\";\nimport { idlTypeIncludesDictionary } from \"../validators/helpers.js\";\n\nexport class Argument extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const start_position = tokeniser.position;\n    const tokens = {};\n    const ret = new Argument({ source: tokeniser.source, tokens });\n    ret.extAttrs = ExtendedAttributes.parse(tokeniser);\n    tokens.optional = tokeniser.consume(\"optional\");\n    ret.idlType = type_with_extended_attributes(tokeniser, \"argument-type\");\n    if (!ret.idlType) {\n      return tokeniser.unconsume(start_position);\n    }\n    if (!tokens.optional) {\n      tokens.variadic = tokeniser.consume(\"...\");\n    }\n    tokens.name = tokeniser.consume(\"identifier\", ...argumentNameKeywords);\n    if (!tokens.name) {\n      return tokeniser.unconsume(start_position);\n    }\n    ret.default = tokens.optional ? Default.parse(tokeniser) : null;\n    return ret;\n  }\n\n  get type() {\n    return \"argument\";\n  }\n  get optional() {\n    return !!this.tokens.optional;\n  }\n  get variadic() {\n    return !!this.tokens.variadic;\n  }\n  get name() {\n    return unescape(this.tokens.name.value);\n  }\n\n  *validate(defs) {\n    yield* this.idlType.validate(defs);\n    if (idlTypeIncludesDictionary(this.idlType, defs)) {\n      if (this.optional && !this.default) {\n        const message = `Optional dictionary arguments must have a default value of \\`{}\\`.`;\n        yield validationError(this.source, this.tokens.name, this, message, {\n          autofix: autofixOptionalDictionaryDefaultValue(this)\n        });\n      }\n      if (this.idlType.nullable) {\n        const message = `Dictionary arguments cannot be nullable.`;\n        yield validationError(this.source, this.tokens.name, this, message);\n      }\n    }\n  }\n}\n\n/**\n * @param {Argument} arg\n */\nfunction autofixOptionalDictionaryDefaultValue(arg) {\n  return () => {\n    arg.default = Default.parse(new Tokeniser(\" = {}\"));\n  };\n}\n","import { Base } from \"./base.js\";\n\nexport class Token extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   * @param {string} type\n   */\n  static parser(tokeniser, type) {\n    return () => {\n      const value = tokeniser.consume(type);\n      if (value) {\n        return new Token({ source: tokeniser.source, tokens: { value } });\n      }\n    };\n  }\n\n  get value() {\n    return this.tokens.value.value;\n  }\n}\n","import { Base } from \"./base.js\";\nimport { return_type, argument_list, unescape } from \"./helpers.js\";\n\nexport class Operation extends Base {\n  /**\n   * @param {import(\"../tokeniser.js\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser, { special, regular } = {}) {\n    const tokens = { special };\n    const ret = new Operation({ source: tokeniser.source, tokens });\n    if (special && special.value === \"stringifier\") {\n      tokens.termination = tokeniser.consume(\";\");\n      if (tokens.termination) {\n        ret.arguments = [];\n        return ret;\n      }\n    }\n    if (!special && !regular) {\n      tokens.special = tokeniser.consume(\"getter\", \"setter\", \"deleter\");\n    }\n    ret.idlType = return_type(tokeniser) || tokeniser.error(\"Missing return type\");\n    tokens.name = tokeniser.consume(\"identifier\", \"includes\");\n    tokens.open = tokeniser.consume(\"(\") || tokeniser.error(\"Invalid operation\");\n    ret.arguments = argument_list(tokeniser);\n    tokens.close = tokeniser.consume(\")\") || tokeniser.error(\"Unterminated operation\");\n    tokens.termination = tokeniser.consume(\";\") || tokeniser.error(\"Unterminated operation, expected `;`\");\n    return ret;\n  }\n\n  get type() {\n    return \"operation\";\n  }\n  get name() {\n    const { name } = this.tokens;\n    if (!name) {\n      return \"\";\n    }\n    return unescape(name.value);\n  }\n  get special() {\n    if (!this.tokens.special) {\n      return \"\";\n    }\n    return this.tokens.special.value;\n  }\n\n  *validate(defs) {\n    if (this.idlType) {\n      yield* this.idlType.validate(defs);\n    }\n    for (const argument of this.arguments) {\n      yield* argument.validate(defs);\n    }\n  }\n}\n","import { Base } from \"./base.js\";\nimport { type_with_extended_attributes, unescape } from \"./helpers.js\";\n\nexport class Attribute extends Base {\n  /**\n   * @param {import(\"../tokeniser.js\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser, { special, noInherit = false, readonly = false } = {}) {\n    const start_position = tokeniser.position;\n    const tokens = { special };\n    const ret = new Attribute({ source: tokeniser.source, tokens });\n    if (!special && !noInherit) {\n      tokens.special = tokeniser.consume(\"inherit\");\n    }\n    if (ret.special === \"inherit\" && tokeniser.probe(\"readonly\")) {\n      tokeniser.error(\"Inherited attributes cannot be read-only\");\n    }\n    tokens.readonly = tokeniser.consume(\"readonly\");\n    if (readonly && !tokens.readonly && tokeniser.probe(\"attribute\")) {\n      tokeniser.error(\"Attributes must be readonly in this context\");\n    }\n    tokens.base = tokeniser.consume(\"attribute\");\n    if (!tokens.base) {\n      tokeniser.unconsume(start_position);\n      return;\n    }\n    ret.idlType = type_with_extended_attributes(tokeniser, \"attribute-type\") || tokeniser.error(\"Attribute lacks a type\");\n    switch (ret.idlType.generic) {\n      case \"sequence\":\n      case \"record\": tokeniser.error(`Attributes cannot accept ${ret.idlType.generic} types`);\n    }\n    tokens.name = tokeniser.consume(\"identifier\", \"async\", \"required\") || tokeniser.error(\"Attribute lacks a name\");\n    tokens.termination = tokeniser.consume(\";\") || tokeniser.error(\"Unterminated attribute, expected `;`\");\n    return ret;\n  }\n\n  get type() {\n    return \"attribute\";\n  }\n  get special() {\n    if (!this.tokens.special) {\n      return \"\";\n    }\n    return this.tokens.special.value;\n  }\n  get readonly() {\n    return !!this.tokens.readonly;\n  }\n  get name() {\n    return unescape(this.tokens.name.value);\n  }\n\n  *validate(defs) {\n    yield* this.idlType.validate(defs);\n  }\n}\n","import { list, unescape } from \"./helpers.js\";\nimport { Token } from \"./token.js\";\nimport { Base } from \"./base.js\";\n\nclass EnumValue extends Token {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const value = tokeniser.consume(\"string\");\n    if (value) {\n      return new EnumValue({ source: tokeniser.source, tokens: { value } });\n    }\n  }\n\n  get type() {\n    return \"enum-value\";\n  }\n  get value() {\n    return super.value.slice(1, -1);\n  }\n}\n\nexport class Enum extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const tokens = {};\n    tokens.base = tokeniser.consume(\"enum\");\n    if (!tokens.base) {\n      return;\n    }\n    tokens.name = tokeniser.consume(\"identifier\") || tokeniser.error(\"No name for enum\");\n    const ret = tokeniser.current = new Enum({ source: tokeniser.source, tokens });\n    tokens.open = tokeniser.consume(\"{\") || tokeniser.error(\"Bodyless enum\");\n    ret.values = list(tokeniser, {\n      parser: EnumValue.parse,\n      allowDangler: true,\n      listName: \"enumeration\"\n    });\n    if (tokeniser.probe(\"string\")) {\n      tokeniser.error(\"No comma between enum values\");\n    }\n    tokens.close = tokeniser.consume(\"}\") || tokeniser.error(\"Unexpected value in enum\");\n    if (!ret.values.length) {\n      tokeniser.error(\"No value in enum\");\n    }\n    tokens.termination = tokeniser.consume(\";\") || tokeniser.error(\"No semicolon after enum\");\n    return ret;\n  }\n\n  get type() {\n    return \"enum\";\n  }\n  get name() {\n    return unescape(this.tokens.name.value);\n  }\n}\n","import { Base } from \"./base.js\";\nimport { unescape } from \"./helpers.js\";\n\nexport class Includes extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const target = tokeniser.consume(\"identifier\");\n    if (!target) {\n      return;\n    }\n    const tokens = { target };\n    tokens.includes = tokeniser.consume(\"includes\");\n    if (!tokens.includes) {\n      tokeniser.unconsume(target.index);\n      return;\n    }\n    tokens.mixin = tokeniser.consume(\"identifier\") || tokeniser.error(\"Incomplete includes statement\");\n    tokens.termination = tokeniser.consume(\";\") || tokeniser.error(\"No terminating ; for includes statement\");\n    return new Includes({ source: tokeniser.source, tokens });\n  }\n\n  get type() {\n    return \"includes\";\n  }\n  get target() {\n    return unescape(this.tokens.target.value);\n  }\n  get includes() {\n    return unescape(this.tokens.mixin.value);\n  }\n}\n","import { Base } from \"./base.js\";\nimport { type_with_extended_attributes, unescape } from \"./helpers.js\";\n\nexport class Typedef extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const tokens = {};\n    const ret = new Typedef({ source: tokeniser.source, tokens });\n    tokens.base = tokeniser.consume(\"typedef\");\n    if (!tokens.base) {\n      return;\n    }\n    ret.idlType = type_with_extended_attributes(tokeniser, \"typedef-type\") || tokeniser.error(\"Typedef lacks a type\");\n    tokens.name = tokeniser.consume(\"identifier\") || tokeniser.error(\"Typedef lacks a name\");\n    tokeniser.current = ret;\n    tokens.termination = tokeniser.consume(\";\") || tokeniser.error(\"Unterminated typedef, expected `;`\");\n    return ret;\n  }\n\n  get type() {\n    return \"typedef\";\n  }\n  get name() {\n    return unescape(this.tokens.name.value);\n  }\n\n  *validate(defs) {\n    yield* this.idlType.validate(defs);\n  }\n}\n","import { Base } from \"./base.js\";\nimport { return_type, argument_list, unescape } from \"./helpers.js\";\n\nexport class CallbackFunction extends Base {\n  /**\n   * @param {import(\"../tokeniser.js\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser, base) {\n    const tokens = { base };\n    const ret = new CallbackFunction({ source: tokeniser.source, tokens });\n    tokens.name = tokeniser.consume(\"identifier\") || tokeniser.error(\"Callback lacks a name\");\n    tokeniser.current = ret;\n    tokens.assign = tokeniser.consume(\"=\") || tokeniser.error(\"Callback lacks an assignment\");\n    ret.idlType = return_type(tokeniser) || tokeniser.error(\"Callback lacks a return type\");\n    tokens.open = tokeniser.consume(\"(\") || tokeniser.error(\"Callback lacks parentheses for arguments\");\n    ret.arguments = argument_list(tokeniser);\n    tokens.close = tokeniser.consume(\")\") || tokeniser.error(\"Unterminated callback\");\n    tokens.termination = tokeniser.consume(\";\") || tokeniser.error(\"Unterminated callback, expected `;`\");\n    return ret;\n  }\n\n  get type() {\n    return \"callback\";\n  }\n  get name() {\n    return unescape(this.tokens.name.value);\n  }\n\n  *validate(defs) {\n    yield* this.idlType.validate(defs);\n  }\n}\n","import { Base } from \"./base.js\";\nimport { ExtendedAttributes } from \"./extended-attributes.js\";\nimport { unescape } from \"./helpers.js\";\n\n/**\n * @param {import(\"../tokeniser.js\").Tokeniser} tokeniser\n */\nfunction inheritance(tokeniser) {\n  const colon = tokeniser.consume(\":\");\n  if (!colon) {\n    return {};\n  }\n  const inheritance = tokeniser.consume(\"identifier\") || tokeniser.error(\"Inheritance lacks a type\");\n  return { colon, inheritance };\n}\n\nexport class Container extends Base {\n    /**\n     * @param {import(\"../tokeniser.js\").Tokeniser} tokeniser\n     * @param {*} instance\n     * @param {*} args\n     */\n    static parse(tokeniser, instance, { type, inheritable, allowedMembers }) {\n      const { tokens } = instance;\n      tokens.name = tokeniser.consume(\"identifier\") || tokeniser.error(`Missing name in ${instance.type}`);\n      tokeniser.current = instance;\n      if (inheritable) {\n        Object.assign(tokens, inheritance(tokeniser));\n      }\n      tokens.open = tokeniser.consume(\"{\") || tokeniser.error(`Bodyless ${type}`);\n      instance.members = [];\n      while (true) {\n        tokens.close = tokeniser.consume(\"}\");\n        if (tokens.close) {\n          tokens.termination = tokeniser.consume(\";\") || tokeniser.error(`Missing semicolon after ${type}`);\n          return instance;\n        }\n        const ea = ExtendedAttributes.parse(tokeniser);\n        let mem;\n        for (const [parser, ...args] of allowedMembers) {\n          mem = parser(tokeniser, ...args);\n          if (mem) {\n            break;\n          }\n        }\n        if (!mem) {\n          tokeniser.error(\"Unknown member\");\n        }\n        mem.extAttrs = ea;\n        instance.members.push(mem);\n      }\n    }\n\n    get partial() {\n      return !!this.tokens.partial;\n    }\n    get name() {\n      return unescape(this.tokens.name.value);\n    }\n    get inheritance() {\n      if (!this.tokens.inheritance) {\n        return null;\n      }\n      return unescape(this.tokens.inheritance.value);\n    }\n\n    *validate(defs) {\n      for (const member of this.members) {\n        if (member.validate) {\n          yield* member.validate(defs);\n        }\n      }\n    }\n  }\n","import { Base } from \"./base.js\";\nimport { Type } from \"./type.js\";\nimport { const_data, const_value, primitive_type } from \"./helpers.js\";\n\nexport class Constant extends Base {\n  /**\n   * @param {import(\"../tokeniser.js\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const tokens = {};\n    tokens.base = tokeniser.consume(\"const\");\n    if (!tokens.base) {\n      return;\n    }\n    let idlType = primitive_type(tokeniser);\n    if (!idlType) {\n      const base = tokeniser.consume(\"identifier\") || tokeniser.error(\"Const lacks a type\");\n      idlType = new Type({ source: tokeniser.source, tokens: { base } });\n    }\n    if (tokeniser.probe(\"?\")) {\n      tokeniser.error(\"Unexpected nullable constant type\");\n    }\n    idlType.type = \"const-type\";\n    tokens.name = tokeniser.consume(\"identifier\") || tokeniser.error(\"Const lacks a name\");\n    tokens.assign = tokeniser.consume(\"=\") || tokeniser.error(\"Const lacks value assignment\");\n    tokens.value = const_value(tokeniser) || tokeniser.error(\"Const lacks a value\");\n    tokens.termination = tokeniser.consume(\";\") || tokeniser.error(\"Unterminated const, expected `;`\");\n    const ret = new Constant({ source: tokeniser.source, tokens });\n    ret.idlType = idlType;\n    return ret;\n  }\n\n  get type() {\n    return \"const\";\n  }\n  get name() {\n    return unescape(this.tokens.name.value);\n  }\n  get value() {\n    return const_data(this.tokens.value);\n  }\n}\n","import { Base } from \"./base.js\";\nimport { type_with_extended_attributes } from \"./helpers.js\";\n\nexport class IterableLike extends Base {\n  /**\n   * @param {import(\"../tokeniser.js\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const start_position = tokeniser.position;\n    const tokens = {};\n    const ret = new IterableLike({ source: tokeniser.source, tokens });\n    tokens.readonly = tokeniser.consume(\"readonly\");\n    if (!tokens.readonly) {\n      tokens.async = tokeniser.consume(\"async\");\n    }\n    tokens.base =\n      tokens.readonly ? tokeniser.consume(\"maplike\", \"setlike\") :\n      tokens.async ? tokeniser.consume(\"iterable\") :\n      tokeniser.consume(\"iterable\", \"maplike\", \"setlike\");\n    if (!tokens.base) {\n      tokeniser.unconsume(start_position);\n      return;\n    }\n\n    const { type } = ret;\n    const secondTypeRequired = type === \"maplike\" || ret.async;\n    const secondTypeAllowed = secondTypeRequired || type === \"iterable\";\n\n    tokens.open = tokeniser.consume(\"<\") || tokeniser.error(`Missing less-than sign \\`<\\` in ${type} declaration`);\n    const first = type_with_extended_attributes(tokeniser) || tokeniser.error(`Missing a type argument in ${type} declaration`);\n    ret.idlType = [first];\n    if (secondTypeAllowed) {\n      first.tokens.separator = tokeniser.consume(\",\");\n      if (first.tokens.separator) {\n        ret.idlType.push(type_with_extended_attributes(tokeniser));\n      }\n      else if (secondTypeRequired) {\n        tokeniser.error(`Missing second type argument in ${type} declaration`);\n      }\n    }\n    tokens.close = tokeniser.consume(\">\") || tokeniser.error(`Missing greater-than sign \\`>\\` in ${type} declaration`);\n    tokens.termination = tokeniser.consume(\";\") || tokeniser.error(`Missing semicolon after ${type} declaration`);\n\n    return ret;\n  }\n\n  get type() {\n    return this.tokens.base.value;\n  }\n  get readonly() {\n    return !!this.tokens.readonly;\n  }\n  get async() {\n    return !!this.tokens.async;\n  }\n}\n","import { Container } from \"./container.js\";\nimport { Attribute } from \"./attribute.js\";\nimport { Operation } from \"./operation.js\";\nimport { Constant } from \"./constant.js\";\nimport { IterableLike } from \"./iterable.js\";\nimport { stringifier, autofixAddExposedWindow } from \"./helpers.js\";\nimport { validationError } from \"../error.js\";\nimport { checkInterfaceMemberDuplication } from \"../validators/interface.js\";\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n */\nfunction static_member(tokeniser) {\n  const special = tokeniser.consume(\"static\");\n  if (!special) return;\n  const member = Attribute.parse(tokeniser, { special }) ||\n    Operation.parse(tokeniser, { special }) ||\n    tokeniser.error(\"No body in static member\");\n  return member;\n}\n\nexport class Interface extends Container {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser, base, { partial = null } = {}) {\n    const tokens = { partial, base };\n    return Container.parse(tokeniser, new Interface({ source: tokeniser.source, tokens }), {\n      type: \"interface\",\n      inheritable: !partial,\n      allowedMembers: [\n        [Constant.parse],\n        [static_member],\n        [stringifier],\n        [IterableLike.parse],\n        [Attribute.parse],\n        [Operation.parse]\n      ]\n    });\n  }\n\n  get type() {\n    return \"interface\";\n  }\n\n  *validate(defs) {\n    yield* this.extAttrs.validate(defs);\n    if (\n      !this.partial &&\n      this.extAttrs.every(extAttr => extAttr.name !== \"Exposed\") &&\n      this.extAttrs.every(extAttr => extAttr.name !== \"NoInterfaceObject\")\n    ) {\n      const message = `Interfaces must have \\`[Exposed]\\` extended attribute. \\\nTo fix, add, for example, \\`[Exposed=Window]\\`. Please also consider carefully \\\nif your interface should also be exposed in a Worker scope. Refer to the \\\n[WebIDL spec section on Exposed](https://heycam.github.io/webidl/#Exposed) \\\nfor more information.`;\n      yield validationError(this.source, this.tokens.name, this, message, {\n        autofix: autofixAddExposedWindow(this)\n      });\n    }\n\n    yield* super.validate(defs);\n    if (!this.partial) {\n      yield* checkInterfaceMemberDuplication(defs, this);\n    }\n  }\n}\n","import { validationError } from \"../error.js\";\n\nexport function* checkInterfaceMemberDuplication(defs, i) {\n  const opNames = new Set(getOperations(i).map(op => op.name));\n  const partials = defs.partials.get(i.name) || [];\n  const mixins = defs.mixinMap.get(i.name) || [];\n  for (const ext of [...partials, ...mixins]) {\n    const additions = getOperations(ext);\n    yield* forEachExtension(additions, opNames, ext, i);\n    for (const addition of additions) {\n      opNames.add(addition.name);\n    }\n  }\n\n  function* forEachExtension(additions, existings, ext, base) {\n    for (const addition of additions) {\n      const { name } = addition;\n      if (name && existings.has(name)) {\n        const message = `The operation \"${name}\" has already been defined for the base interface \"${base.name}\" either in itself or in a mixin`;\n        yield validationError(ext.source, addition.tokens.name, ext, message);\n      }\n    }\n  }\n\n  function getOperations(i) {\n    return i.members\n      .filter(({type}) => type === \"operation\");\n  }\n}\n","import { Container } from \"./container.js\";\nimport { Constant } from \"./constant.js\";\nimport { Attribute } from \"./attribute.js\";\nimport { Operation } from \"./operation.js\";\nimport { stringifier } from \"./helpers.js\";\n\nexport class Mixin extends Container {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser, base, { partial } = {}) {\n    const tokens = { partial, base };\n    tokens.mixin = tokeniser.consume(\"mixin\");\n    if (!tokens.mixin) {\n      return;\n    }\n    return Container.parse(tokeniser, new Mixin({ source: tokeniser.source, tokens }), {\n      type: \"interface mixin\",\n      allowedMembers: [\n        [Constant.parse],\n        [stringifier],\n        [Attribute.parse, { noInherit: true }],\n        [Operation.parse, { regular: true }]\n      ]\n    });\n  }\n\n  get type() {\n    return \"interface mixin\";\n  }\n}\n","import { Base } from \"./base.js\";\nimport { unescape, type_with_extended_attributes } from \"./helpers.js\";\nimport { ExtendedAttributes } from \"./extended-attributes.js\";\nimport { Default } from \"./default.js\";\n\nexport class Field extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const tokens = {};\n    const ret = new Field({ source: tokeniser.source, tokens });\n    ret.extAttrs = ExtendedAttributes.parse(tokeniser);\n    tokens.required = tokeniser.consume(\"required\");\n    ret.idlType = type_with_extended_attributes(tokeniser, \"dictionary-type\") || tokeniser.error(\"Dictionary member lacks a type\");\n    tokens.name = tokeniser.consume(\"identifier\") || tokeniser.error(\"Dictionary member lacks a name\");\n    ret.default = Default.parse(tokeniser);\n    if (tokens.required && ret.default) tokeniser.error(\"Required member must not have a default\");\n    tokens.termination = tokeniser.consume(\";\") || tokeniser.error(\"Unterminated dictionary member, expected `;`\");\n    return ret;\n  }\n\n  get type() {\n    return \"field\";\n  }\n  get name() {\n    return unescape(this.tokens.name.value);\n  }\n  get required() {\n    return !!this.tokens.required;\n  }\n\n  *validate(defs) {\n    yield* this.idlType.validate(defs);\n  }\n}\n","import { Container } from \"./container.js\";\nimport { Field } from \"./field.js\";\n\nexport class Dictionary extends Container {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser, { partial } = {}) {\n    const tokens = { partial };\n    tokens.base = tokeniser.consume(\"dictionary\");\n    if (!tokens.base) {\n      return;\n    }\n    return Container.parse(tokeniser, new Dictionary({ source: tokeniser.source, tokens }), {\n      type: \"dictionary\",\n      inheritable: !partial,\n      allowedMembers: [\n        [Field.parse],\n      ]\n    });\n  }\n\n  get type() {\n    return \"dictionary\";\n  }\n}\n","import { Container } from \"./container.js\";\nimport { Attribute } from \"./attribute.js\";\nimport { Operation } from \"./operation.js\";\nimport { validationError } from \"../error.js\";\nimport { autofixAddExposedWindow } from \"./helpers.js\";\n\nexport class Namespace extends Container {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser, { partial } = {}) {\n    const tokens = { partial };\n    tokens.base = tokeniser.consume(\"namespace\");\n    if (!tokens.base) {\n      return;\n    }\n    return Container.parse(tokeniser, new Namespace({ source: tokeniser.source, tokens }), {\n      type: \"namespace\",\n      allowedMembers: [\n        [Attribute.parse, { noInherit: true, readonly: true }],\n        [Operation.parse, { regular: true }]\n      ]\n    });\n  }\n\n  get type() {\n    return \"namespace\";\n  }\n\n  *validate(defs) {\n    if (!this.partial && this.extAttrs.every(extAttr => extAttr.name !== \"Exposed\")) {\n      const message = `Namespaces must have [Exposed] extended attribute. \\\nTo fix, add, for example, [Exposed=Window]. Please also consider carefully \\\nif your namespace should also be exposed in a Worker scope. Refer to the \\\n[WebIDL spec section on Exposed](https://heycam.github.io/webidl/#Exposed) \\\nfor more information.`;\n      yield validationError(this.source, this.tokens.name, this, message, {\n        autofix: autofixAddExposedWindow(this)\n      });\n    }\n    yield* super.validate(defs);\n  }\n}\n","import { Container } from \"./container.js\";\nimport { Operation } from \"./operation.js\";\nimport { Constant } from \"./constant.js\";\n\n\nexport class CallbackInterface extends Container {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser, callback, { partial = null } = {}) {\n    const tokens = { callback };\n    tokens.base = tokeniser.consume(\"interface\");\n    if (!tokens.base) {\n      return;\n    }\n    return Container.parse(tokeniser, new CallbackInterface({ source: tokeniser.source, tokens }), {\n      type: \"callback interface\",\n      inheritable: !partial,\n      allowedMembers: [\n        [Constant.parse],\n        [Operation.parse, { regular: true }]\n      ]\n    });\n  }\n\n  get type() {\n    return \"callback interface\";\n  }\n}\n","\"use strict\";\n\nimport { Tokeniser } from \"./tokeniser.js\";\nimport { Enum } from \"./productions/enum.js\";\nimport { Includes } from \"./productions/includes.js\";\nimport { ExtendedAttributes } from \"./productions/extended-attributes.js\";\nimport { Typedef } from \"./productions/typedef.js\";\nimport { CallbackFunction } from \"./productions/callback.js\";\nimport { Interface } from \"./productions/interface.js\";\nimport { Mixin } from \"./productions/mixin.js\";\nimport { Dictionary } from \"./productions/dictionary.js\";\nimport { Namespace } from \"./productions/namespace.js\";\nimport { CallbackInterface } from \"./productions/callback-interface.js\";\n\n/**\n * @param {Tokeniser} tokeniser\n * @param {object} options\n * @param {boolean} [options.concrete]\n */\nfunction parseByTokens(tokeniser, options) {\n  const source = tokeniser.source;\n\n  function error(str) {\n    tokeniser.error(str);\n  }\n\n  function consume(...candidates) {\n    return tokeniser.consume(...candidates);\n  }\n\n  function callback() {\n    const callback = consume(\"callback\");\n    if (!callback) return;\n    if (tokeniser.probe(\"interface\")) {\n      return CallbackInterface.parse(tokeniser, callback);\n    }\n    return CallbackFunction.parse(tokeniser, callback);\n  }\n\n  function interface_(opts) {\n    const base = consume(\"interface\");\n    if (!base) return;\n    const ret = Mixin.parse(tokeniser, base, opts) ||\n      Interface.parse(tokeniser, base, opts) ||\n      error(\"Interface has no proper body\");\n    return ret;\n  }\n\n  function partial() {\n    const partial = consume(\"partial\");\n    if (!partial) return;\n    return Dictionary.parse(tokeniser, { partial }) ||\n      interface_({ partial }) ||\n      Namespace.parse(tokeniser, { partial }) ||\n      error(\"Partial doesn't apply to anything\");\n  }\n\n  function definition() {\n    return callback() ||\n      interface_() ||\n      partial() ||\n      Dictionary.parse(tokeniser) ||\n      Enum.parse(tokeniser) ||\n      Typedef.parse(tokeniser) ||\n      Includes.parse(tokeniser) ||\n      Namespace.parse(tokeniser);\n  }\n\n  function definitions() {\n    if (!source.length) return [];\n    const defs = [];\n    while (true) {\n      const ea = ExtendedAttributes.parse(tokeniser);\n      const def = definition();\n      if (!def) {\n        if (ea.length) error(\"Stray extended attributes\");\n        break;\n      }\n      def.extAttrs = ea;\n      defs.push(def);\n    }\n    const eof = consume(\"eof\");\n    if (options.concrete) {\n      defs.push(eof);\n    }\n    return defs;\n  }\n  const res = definitions();\n  if (tokeniser.position < source.length) error(\"Unrecognised tokens\");\n  return res;\n}\n\nexport function parse(str, options = {}) {\n  const tokeniser = new Tokeniser(str);\n  if (typeof options.sourceName !== \"undefined\") {\n    tokeniser.source.name = options.sourceName;\n  }\n  return parseByTokens(tokeniser, options);\n}\n","\"use strict\";\n\nfunction noop(arg) {\n  return arg;\n}\n\nconst templates = {\n  wrap: items => items.join(\"\"),\n  trivia: noop,\n  name: noop,\n  reference: noop,\n  type: noop,\n  generic: noop,\n  inheritance: noop,\n  definition: noop,\n  extendedAttribute: noop,\n  extendedAttributeReference: noop\n};\n\nexport function write(ast, { templates: ts = templates } = {}) {\n  ts = Object.assign({}, templates, ts);\n\n  function reference(raw, { unescaped, context }) {\n    if (!unescaped) {\n      unescaped = raw.startsWith(\"_\") ? raw.slice(1) : raw;\n    }\n    return ts.reference(raw, unescaped, context);\n  }\n\n  function token(t, wrapper = noop, ...args) {\n    if (!t) {\n      return \"\";\n    }\n    const value = wrapper(t.value, ...args);\n    return ts.wrap([ts.trivia(t.trivia), value]);\n  }\n\n  function reference_token(t, context) {\n    return token(t, reference, { context });\n  }\n\n  function name_token(t, arg) {\n    return token(t, ts.name, arg);\n  }\n\n  function type_body(it) {\n    if (it.union || it.generic) {\n      return ts.wrap([\n        token(it.tokens.base, ts.generic),\n        token(it.tokens.open),\n        ...it.subtype.map(type),\n        token(it.tokens.close)\n      ]);\n    }\n    const firstToken = it.tokens.prefix || it.tokens.base;\n    const prefix = it.tokens.prefix ? [\n      it.tokens.prefix.value,\n      ts.trivia(it.tokens.base.trivia)\n    ] : [];\n    const ref = reference(ts.wrap([\n      ...prefix,\n      it.tokens.base.value,\n      token(it.tokens.postfix)\n    ]), { unescaped: it.idlType, context: it });\n    return ts.wrap([ts.trivia(firstToken.trivia), ref]);\n  }\n  function type(it) {\n    return ts.wrap([\n      extended_attributes(it.extAttrs),\n      type_body(it),\n      token(it.tokens.nullable),\n      token(it.tokens.separator)\n    ]);\n  }\n  function default_(def) {\n    if (!def) {\n      return \"\";\n    }\n    return ts.wrap([\n      token(def.tokens.assign),\n      ...def.expression.map(t => token(t))\n    ]);\n  }\n  function argument(arg) {\n    return ts.wrap([\n      extended_attributes(arg.extAttrs),\n      token(arg.tokens.optional),\n      ts.type(type(arg.idlType)),\n      token(arg.tokens.variadic),\n      name_token(arg.tokens.name, { data: arg }),\n      default_(arg.default),\n      token(arg.tokens.separator)\n    ]);\n  }\n  function identifier(id, context) {\n    return ts.wrap([\n      reference_token(id.tokens.value, context),\n      token(id.tokens.separator)\n    ]);\n  }\n  function make_ext_at(it) {\n    const { rhsType } = it.params;\n    return ts.wrap([\n      ts.trivia(it.tokens.name.trivia),\n      ts.extendedAttribute(ts.wrap([\n        ts.extendedAttributeReference(it.name),\n        token(it.params.tokens.assign),\n        reference_token(it.params.tokens.secondaryName, it),\n        token(it.params.tokens.open),\n        ...!it.params.list ? [] :\n          it.params.list.map(\n            rhsType === \"identifier-list\" ? id => identifier(id, it) : argument\n          ),\n        token(it.params.tokens.close)\n      ])),\n      token(it.tokens.separator)\n    ]);\n  }\n  function extended_attributes(eats) {\n    if (!eats.length) return \"\";\n    return ts.wrap([\n      token(eats.tokens.open),\n      ...eats.map(make_ext_at),\n      token(eats.tokens.close)\n    ]);\n  }\n\n  function operation(it, parent) {\n    const body = it.idlType ? [\n      ts.type(type(it.idlType)),\n      name_token(it.tokens.name, { data: it, parent }),\n      token(it.tokens.open),\n      ts.wrap(it.arguments.map(argument)),\n      token(it.tokens.close),\n    ] : [];\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      token(it.tokens.special),\n      ...body,\n      token(it.tokens.termination)\n    ]), { data: it, parent });\n  }\n\n  function attribute(it, parent) {\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      token(it.tokens.special),\n      token(it.tokens.readonly),\n      token(it.tokens.base),\n      ts.type(type(it.idlType)),\n      name_token(it.tokens.name, { data: it, parent }),\n      token(it.tokens.termination)\n    ]), { data: it, parent });\n  }\n\n  function inheritance(inh) {\n    if (!inh.tokens.inheritance) {\n      return \"\";\n    }\n    return ts.wrap([\n      token(inh.tokens.colon),\n      ts.trivia(inh.tokens.inheritance.trivia),\n      ts.inheritance(reference(inh.tokens.inheritance.value, { context: inh }))\n    ]);\n  }\n\n  function container(it) {\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      token(it.tokens.callback),\n      token(it.tokens.partial),\n      token(it.tokens.base),\n      token(it.tokens.mixin),\n      name_token(it.tokens.name, { data: it }),\n      inheritance(it),\n      token(it.tokens.open),\n      iterate(it.members, it),\n      token(it.tokens.close),\n      token(it.tokens.termination)\n    ]), { data: it });\n  }\n\n  function field(it, parent) {\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      token(it.tokens.required),\n      ts.type(type(it.idlType)),\n      name_token(it.tokens.name, { data: it, parent }),\n      default_(it.default),\n      token(it.tokens.termination)\n    ]), { data: it, parent });\n  }\n  function const_(it, parent) {\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      token(it.tokens.base),\n      ts.type(type(it.idlType)),\n      name_token(it.tokens.name, { data: it, parent }),\n      token(it.tokens.assign),\n      token(it.tokens.value),\n      token(it.tokens.termination)\n    ]), { data: it, parent });\n  }\n  function typedef(it) {\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      token(it.tokens.base),\n      ts.type(type(it.idlType)),\n      name_token(it.tokens.name, { data: it }),\n      token(it.tokens.termination)\n    ]), { data: it });\n  }\n  function includes(it) {\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      reference_token(it.tokens.target, it),\n      token(it.tokens.includes),\n      reference_token(it.tokens.mixin, it),\n      token(it.tokens.termination)\n    ]), { data: it });\n  }\n  function callback(it) {\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      token(it.tokens.base),\n      name_token(it.tokens.name, { data: it }),\n      token(it.tokens.assign),\n      ts.type(type(it.idlType)),\n      token(it.tokens.open),\n      ...it.arguments.map(argument),\n      token(it.tokens.close),\n      token(it.tokens.termination),\n    ]), { data: it });\n  }\n  function enum_(it) {\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      token(it.tokens.base),\n      name_token(it.tokens.name, { data: it }),\n      token(it.tokens.open),\n      iterate(it.values, it),\n      token(it.tokens.close),\n      token(it.tokens.termination)\n    ]), { data: it });\n  }\n  function enum_value(v, parent) {\n    return ts.wrap([\n      ts.trivia(v.tokens.value.trivia),\n      ts.definition(\n        ts.wrap(['\"', ts.name(v.value, { data: v, parent }), '\"']),\n        { data: v, parent }\n      ),\n      token(v.tokens.separator)\n    ]);\n  }\n  function iterable_like(it, parent) {\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      token(it.tokens.readonly),\n      token(it.tokens.async),\n      token(it.tokens.base, ts.generic),\n      token(it.tokens.open),\n      ts.wrap(it.idlType.map(type)),\n      token(it.tokens.close),\n      token(it.tokens.termination)\n    ]), { data: it, parent });\n  }\n  function eof(it) {\n    return ts.trivia(it.trivia);\n  }\n\n  const table = {\n    interface: container,\n    \"interface mixin\": container,\n    namespace: container,\n    operation,\n    attribute,\n    dictionary: container,\n    field,\n    const: const_,\n    typedef,\n    includes,\n    callback,\n    enum: enum_,\n    \"enum-value\": enum_value,\n    iterable: iterable_like,\n    legacyiterable: iterable_like,\n    maplike: iterable_like,\n    setlike: iterable_like,\n    \"callback interface\": container,\n    eof\n  };\n  function dispatch(it, parent) {\n    const dispatcher = table[it.type];\n    if (!dispatcher) {\n      throw new Error(`Type \"${it.type}\" is unsupported`);\n    }\n    return table[it.type](it, parent);\n  }\n  function iterate(things, parent) {\n    if (!things) return;\n    const results = things.map(thing => dispatch(thing, parent));\n    return ts.wrap(results);\n  }\n  return iterate(ast);\n}\n","\"use strict\";\n\nimport { validationError as error } from \"./error.js\";\n\nfunction getMixinMap(all, unique) {\n  const map = new Map();\n  const includes = all.filter(def => def.type === \"includes\");\n  for (const include of includes) {\n    const mixin = unique.get(include.includes);\n    if (!mixin) {\n      continue;\n    }\n    const array = map.get(include.target);\n    if (array) {\n      array.push(mixin);\n    } else {\n      map.set(include.target, [mixin]);\n    }\n  }\n  return map;\n}\n\nfunction groupDefinitions(all) {\n  const unique = new Map();\n  const duplicates = new Set();\n  const partials = new Map();\n  for (const def of all) {\n    if (def.partial) {\n      const array = partials.get(def.name);\n      if (array) {\n        array.push(def);\n      } else {\n        partials.set(def.name, [def]);\n      }\n      continue;\n    }\n    if (!def.name) {\n      continue;\n    }\n    if (!unique.has(def.name)) {\n      unique.set(def.name, def);\n    } else {\n      duplicates.add(def);\n    }\n  }\n  return {\n    all,\n    unique,\n    partials,\n    duplicates,\n    mixinMap: getMixinMap(all, unique),\n    cache: {\n      typedefIncludesDictionary: new WeakMap()\n    },\n  };\n}\n\nfunction* checkDuplicatedNames({ unique, duplicates }) {\n  for (const dup of duplicates) {\n    const { name } = dup;\n    const message = `The name \"${name}\" of type \"${unique.get(name).type}\" was already seen`;\n    yield error(dup.source, dup.tokens.name, dup, message);\n  }\n}\n\nfunction* validateIterable(ast) {\n  const defs = groupDefinitions(ast);\n  for (const def of defs.all) {\n    if (def.validate) {\n      yield* def.validate(defs);\n    }\n  }\n  yield* checkDuplicatedNames(defs);\n}\n\n// Remove this once all of our support targets expose `.flat()` by default\nfunction flatten(array) {\n  if (array.flat) {\n    return array.flat();\n  }\n  return [].concat(...array);\n}\n\n/**\n * @param {*} ast AST or array of ASTs\n */\nexport function validate(ast) {\n  return [...validateIterable(flatten(ast))];\n}\n","export { parse } from \"./lib/webidl2.js\";\nexport { write } from \"./lib/writer.js\";\nexport { validate } from \"./lib/validator.js\";\n"],"sourceRoot":""}